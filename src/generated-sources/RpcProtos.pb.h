// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcProtos.proto

#ifndef PROTOBUF_RpcProtos_2eproto__INCLUDED
#define PROTOBUF_RpcProtos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RpcProtos_2eproto();
void protobuf_AssignDesc_RpcProtos_2eproto();
void protobuf_ShutdownFile_RpcProtos_2eproto();

class RpcRequest;
class RpcResponse;

// ===================================================================

class RpcRequest : public ::google::protobuf::Message {
 public:
  RpcRequest();
  virtual ~RpcRequest();

  RpcRequest(const RpcRequest& from);

  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequest& default_instance();

  void Swap(RpcRequest* other);

  // implements Message ----------------------------------------------

  RpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcRequest& from);
  void MergeFrom(const RpcRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string method_name = 2;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  inline void set_allocated_method_name(::std::string* method_name);

  // optional bytes request_message = 3;
  inline bool has_request_message() const;
  inline void clear_request_message();
  static const int kRequestMessageFieldNumber = 3;
  inline const ::std::string& request_message() const;
  inline void set_request_message(const ::std::string& value);
  inline void set_request_message(const char* value);
  inline void set_request_message(const void* value, size_t size);
  inline ::std::string* mutable_request_message();
  inline ::std::string* release_request_message();
  inline void set_allocated_request_message(::std::string* request_message);

  // @@protoc_insertion_point(class_scope:RpcRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_request_message();
  inline void clear_has_request_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* method_name_;
  ::std::string* request_message_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RpcProtos_2eproto();
  friend void protobuf_AssignDesc_RpcProtos_2eproto();
  friend void protobuf_ShutdownFile_RpcProtos_2eproto();

  void InitAsDefaultInstance();
  static RpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class RpcResponse : public ::google::protobuf::Message {
 public:
  RpcResponse();
  virtual ~RpcResponse();

  RpcResponse(const RpcResponse& from);

  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponse& default_instance();

  void Swap(RpcResponse* other);

  // implements Message ----------------------------------------------

  RpcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResponse& from);
  void MergeFrom(const RpcResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes response_message = 2;
  inline bool has_response_message() const;
  inline void clear_response_message();
  static const int kResponseMessageFieldNumber = 2;
  inline const ::std::string& response_message() const;
  inline void set_response_message(const ::std::string& value);
  inline void set_response_message(const char* value);
  inline void set_response_message(const void* value, size_t size);
  inline ::std::string* mutable_response_message();
  inline ::std::string* release_response_message();
  inline void set_allocated_response_message(::std::string* response_message);

  // optional string error_class = 3;
  inline bool has_error_class() const;
  inline void clear_error_class();
  static const int kErrorClassFieldNumber = 3;
  inline const ::std::string& error_class() const;
  inline void set_error_class(const ::std::string& value);
  inline void set_error_class(const char* value);
  inline void set_error_class(const char* value, size_t size);
  inline ::std::string* mutable_error_class();
  inline ::std::string* release_error_class();
  inline void set_allocated_error_class(::std::string* error_class);

  // optional string error_message = 4;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 4;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // optional string error_trace = 5;
  inline bool has_error_trace() const;
  inline void clear_error_trace();
  static const int kErrorTraceFieldNumber = 5;
  inline const ::std::string& error_trace() const;
  inline void set_error_trace(const ::std::string& value);
  inline void set_error_trace(const char* value);
  inline void set_error_trace(const char* value, size_t size);
  inline ::std::string* mutable_error_trace();
  inline ::std::string* release_error_trace();
  inline void set_allocated_error_trace(::std::string* error_trace);

  // @@protoc_insertion_point(class_scope:RpcResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_response_message();
  inline void clear_has_response_message();
  inline void set_has_error_class();
  inline void clear_has_error_class();
  inline void set_has_error_message();
  inline void clear_has_error_message();
  inline void set_has_error_trace();
  inline void clear_has_error_trace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* response_message_;
  ::std::string* error_class_;
  ::std::string* error_message_;
  ::std::string* error_trace_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RpcProtos_2eproto();
  friend void protobuf_AssignDesc_RpcProtos_2eproto();
  friend void protobuf_ShutdownFile_RpcProtos_2eproto();

  void InitAsDefaultInstance();
  static RpcResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcRequest

// required int32 id = 1;
inline bool RpcRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RpcRequest::id() const {
  return id_;
}
inline void RpcRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string method_name = 2;
inline bool RpcRequest::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcRequest::set_has_method_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcRequest::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcRequest::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& RpcRequest::method_name() const {
  return *method_name_;
}
inline void RpcRequest::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void RpcRequest::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void RpcRequest::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* RpcRequest::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcRequest::set_allocated_method_name(::std::string* method_name) {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (method_name) {
    set_has_method_name();
    method_name_ = method_name;
  } else {
    clear_has_method_name();
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes request_message = 3;
inline bool RpcRequest::has_request_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcRequest::set_has_request_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcRequest::clear_has_request_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcRequest::clear_request_message() {
  if (request_message_ != &::google::protobuf::internal::kEmptyString) {
    request_message_->clear();
  }
  clear_has_request_message();
}
inline const ::std::string& RpcRequest::request_message() const {
  return *request_message_;
}
inline void RpcRequest::set_request_message(const ::std::string& value) {
  set_has_request_message();
  if (request_message_ == &::google::protobuf::internal::kEmptyString) {
    request_message_ = new ::std::string;
  }
  request_message_->assign(value);
}
inline void RpcRequest::set_request_message(const char* value) {
  set_has_request_message();
  if (request_message_ == &::google::protobuf::internal::kEmptyString) {
    request_message_ = new ::std::string;
  }
  request_message_->assign(value);
}
inline void RpcRequest::set_request_message(const void* value, size_t size) {
  set_has_request_message();
  if (request_message_ == &::google::protobuf::internal::kEmptyString) {
    request_message_ = new ::std::string;
  }
  request_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_request_message() {
  set_has_request_message();
  if (request_message_ == &::google::protobuf::internal::kEmptyString) {
    request_message_ = new ::std::string;
  }
  return request_message_;
}
inline ::std::string* RpcRequest::release_request_message() {
  clear_has_request_message();
  if (request_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_message_;
    request_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcRequest::set_allocated_request_message(::std::string* request_message) {
  if (request_message_ != &::google::protobuf::internal::kEmptyString) {
    delete request_message_;
  }
  if (request_message) {
    set_has_request_message();
    request_message_ = request_message;
  } else {
    clear_has_request_message();
    request_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RpcResponse

// required int32 id = 1;
inline bool RpcResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcResponse::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RpcResponse::id() const {
  return id_;
}
inline void RpcResponse::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes response_message = 2;
inline bool RpcResponse::has_response_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcResponse::set_has_response_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcResponse::clear_has_response_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcResponse::clear_response_message() {
  if (response_message_ != &::google::protobuf::internal::kEmptyString) {
    response_message_->clear();
  }
  clear_has_response_message();
}
inline const ::std::string& RpcResponse::response_message() const {
  return *response_message_;
}
inline void RpcResponse::set_response_message(const ::std::string& value) {
  set_has_response_message();
  if (response_message_ == &::google::protobuf::internal::kEmptyString) {
    response_message_ = new ::std::string;
  }
  response_message_->assign(value);
}
inline void RpcResponse::set_response_message(const char* value) {
  set_has_response_message();
  if (response_message_ == &::google::protobuf::internal::kEmptyString) {
    response_message_ = new ::std::string;
  }
  response_message_->assign(value);
}
inline void RpcResponse::set_response_message(const void* value, size_t size) {
  set_has_response_message();
  if (response_message_ == &::google::protobuf::internal::kEmptyString) {
    response_message_ = new ::std::string;
  }
  response_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_response_message() {
  set_has_response_message();
  if (response_message_ == &::google::protobuf::internal::kEmptyString) {
    response_message_ = new ::std::string;
  }
  return response_message_;
}
inline ::std::string* RpcResponse::release_response_message() {
  clear_has_response_message();
  if (response_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_message_;
    response_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcResponse::set_allocated_response_message(::std::string* response_message) {
  if (response_message_ != &::google::protobuf::internal::kEmptyString) {
    delete response_message_;
  }
  if (response_message) {
    set_has_response_message();
    response_message_ = response_message;
  } else {
    clear_has_response_message();
    response_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string error_class = 3;
inline bool RpcResponse::has_error_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcResponse::set_has_error_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcResponse::clear_has_error_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcResponse::clear_error_class() {
  if (error_class_ != &::google::protobuf::internal::kEmptyString) {
    error_class_->clear();
  }
  clear_has_error_class();
}
inline const ::std::string& RpcResponse::error_class() const {
  return *error_class_;
}
inline void RpcResponse::set_error_class(const ::std::string& value) {
  set_has_error_class();
  if (error_class_ == &::google::protobuf::internal::kEmptyString) {
    error_class_ = new ::std::string;
  }
  error_class_->assign(value);
}
inline void RpcResponse::set_error_class(const char* value) {
  set_has_error_class();
  if (error_class_ == &::google::protobuf::internal::kEmptyString) {
    error_class_ = new ::std::string;
  }
  error_class_->assign(value);
}
inline void RpcResponse::set_error_class(const char* value, size_t size) {
  set_has_error_class();
  if (error_class_ == &::google::protobuf::internal::kEmptyString) {
    error_class_ = new ::std::string;
  }
  error_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_error_class() {
  set_has_error_class();
  if (error_class_ == &::google::protobuf::internal::kEmptyString) {
    error_class_ = new ::std::string;
  }
  return error_class_;
}
inline ::std::string* RpcResponse::release_error_class() {
  clear_has_error_class();
  if (error_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_class_;
    error_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcResponse::set_allocated_error_class(::std::string* error_class) {
  if (error_class_ != &::google::protobuf::internal::kEmptyString) {
    delete error_class_;
  }
  if (error_class) {
    set_has_error_class();
    error_class_ = error_class;
  } else {
    clear_has_error_class();
    error_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string error_message = 4;
inline bool RpcResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcResponse::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& RpcResponse::error_message() const {
  return *error_message_;
}
inline void RpcResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void RpcResponse::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void RpcResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* RpcResponse::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string error_trace = 5;
inline bool RpcResponse::has_error_trace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcResponse::set_has_error_trace() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcResponse::clear_has_error_trace() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcResponse::clear_error_trace() {
  if (error_trace_ != &::google::protobuf::internal::kEmptyString) {
    error_trace_->clear();
  }
  clear_has_error_trace();
}
inline const ::std::string& RpcResponse::error_trace() const {
  return *error_trace_;
}
inline void RpcResponse::set_error_trace(const ::std::string& value) {
  set_has_error_trace();
  if (error_trace_ == &::google::protobuf::internal::kEmptyString) {
    error_trace_ = new ::std::string;
  }
  error_trace_->assign(value);
}
inline void RpcResponse::set_error_trace(const char* value) {
  set_has_error_trace();
  if (error_trace_ == &::google::protobuf::internal::kEmptyString) {
    error_trace_ = new ::std::string;
  }
  error_trace_->assign(value);
}
inline void RpcResponse::set_error_trace(const char* value, size_t size) {
  set_has_error_trace();
  if (error_trace_ == &::google::protobuf::internal::kEmptyString) {
    error_trace_ = new ::std::string;
  }
  error_trace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_error_trace() {
  set_has_error_trace();
  if (error_trace_ == &::google::protobuf::internal::kEmptyString) {
    error_trace_ = new ::std::string;
  }
  return error_trace_;
}
inline ::std::string* RpcResponse::release_error_trace() {
  clear_has_error_trace();
  if (error_trace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_trace_;
    error_trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpcResponse::set_allocated_error_trace(::std::string* error_trace) {
  if (error_trace_ != &::google::protobuf::internal::kEmptyString) {
    delete error_trace_;
  }
  if (error_trace) {
    set_has_error_trace();
    error_trace_ = error_trace;
  } else {
    clear_has_error_trace();
    error_trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RpcProtos_2eproto__INCLUDED
