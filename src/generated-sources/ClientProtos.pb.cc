// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProtos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientProtos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tajo {
namespace client {

namespace {

const ::google::protobuf::Descriptor* CreateSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSessionVariableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSessionVariableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionUpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionUpdateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionedStringProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionedStringProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExplainQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExplainQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryResultRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryResultRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryResultResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryResultResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BriefQueryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BriefQueryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedResultSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedResultSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitQueryResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubmitQueryResponse_ResultType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetQueryStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryResultDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryResultDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryResultDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryResultDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageHistoryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageHistoryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryHistoryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryHistoryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryHistoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryHistoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueryInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueryInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateIndexResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateIndexResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIndexWithColumnsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIndexWithColumnsRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientProtos_2eproto() {
  protobuf_AddDesc_ClientProtos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientProtos.proto");
  GOOGLE_CHECK(file != NULL);
  CreateSessionRequest_descriptor_ = file->message_type(0);
  static const int CreateSessionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, basedatabasename_),
  };
  CreateSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSessionRequest_descriptor_,
      CreateSessionRequest::default_instance_,
      CreateSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSessionRequest));
  CreateSessionResponse_descriptor_ = file->message_type(1);
  static const int CreateSessionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, sessionvars_),
  };
  CreateSessionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSessionResponse_descriptor_,
      CreateSessionResponse::default_instance_,
      CreateSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSessionResponse));
  UpdateSessionVariableRequest_descriptor_ = file->message_type(2);
  static const int UpdateSessionVariableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSessionVariableRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSessionVariableRequest, sessionvars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSessionVariableRequest, unsetvariables_),
  };
  UpdateSessionVariableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSessionVariableRequest_descriptor_,
      UpdateSessionVariableRequest::default_instance_,
      UpdateSessionVariableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSessionVariableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSessionVariableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSessionVariableRequest));
  SessionUpdateResponse_descriptor_ = file->message_type(3);
  static const int SessionUpdateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionUpdateResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionUpdateResponse, sessionvars_),
  };
  SessionUpdateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionUpdateResponse_descriptor_,
      SessionUpdateResponse::default_instance_,
      SessionUpdateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionUpdateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionUpdateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionUpdateResponse));
  SessionedStringProto_descriptor_ = file->message_type(4);
  static const int SessionedStringProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionedStringProto, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionedStringProto, value_),
  };
  SessionedStringProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionedStringProto_descriptor_,
      SessionedStringProto::default_instance_,
      SessionedStringProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionedStringProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionedStringProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionedStringProto));
  ExplainQueryResponse_descriptor_ = file->message_type(5);
  static const int ExplainQueryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplainQueryResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplainQueryResponse, explain_),
  };
  ExplainQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExplainQueryResponse_descriptor_,
      ExplainQueryResponse::default_instance_,
      ExplainQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplainQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplainQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExplainQueryResponse));
  QueryRequest_descriptor_ = file->message_type(6);
  static const int QueryRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, sessionvars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, isjson_),
  };
  QueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRequest_descriptor_,
      QueryRequest::default_instance_,
      QueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRequest));
  UpdateQueryResponse_descriptor_ = file->message_type(7);
  static const int UpdateQueryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQueryResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQueryResponse, sessionvars_),
  };
  UpdateQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateQueryResponse_descriptor_,
      UpdateQueryResponse::default_instance_,
      UpdateQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateQueryResponse));
  GetQueryResultRequest_descriptor_ = file->message_type(8);
  static const int GetQueryResultRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultRequest, queryid_),
  };
  GetQueryResultRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryResultRequest_descriptor_,
      GetQueryResultRequest::default_instance_,
      GetQueryResultRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryResultRequest));
  GetQueryResultResponse_descriptor_ = file->message_type(9);
  static const int GetQueryResultResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultResponse, tabledesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultResponse, tajousername_),
  };
  GetQueryResultResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryResultResponse_descriptor_,
      GetQueryResultResponse::default_instance_,
      GetQueryResultResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryResultResponse));
  QueryIdRequest_descriptor_ = file->message_type(10);
  static const int QueryIdRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryIdRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryIdRequest, queryid_),
  };
  QueryIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryIdRequest_descriptor_,
      QueryIdRequest::default_instance_,
      QueryIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryIdRequest));
  GetQueryListRequest_descriptor_ = file->message_type(11);
  static const int GetQueryListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryListRequest, sessionid_),
  };
  GetQueryListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryListRequest_descriptor_,
      GetQueryListRequest::default_instance_,
      GetQueryListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryListRequest));
  BriefQueryInfo_descriptor_ = file->message_type(12);
  static const int BriefQueryInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, querymasterhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, querymasterport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, progress_),
  };
  BriefQueryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BriefQueryInfo_descriptor_,
      BriefQueryInfo::default_instance_,
      BriefQueryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefQueryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BriefQueryInfo));
  GetQueryListResponse_descriptor_ = file->message_type(13);
  static const int GetQueryListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryListResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryListResponse, querylist_),
  };
  GetQueryListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryListResponse_descriptor_,
      GetQueryListResponse::default_instance_,
      GetQueryListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryListResponse));
  GetQueryStatusRequest_descriptor_ = file->message_type(14);
  static const int GetQueryStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusRequest, queryid_),
  };
  GetQueryStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryStatusRequest_descriptor_,
      GetQueryStatusRequest::default_instance_,
      GetQueryStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryStatusRequest));
  SerializedResultSet_descriptor_ = file->message_type(15);
  static const int SerializedResultSet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedResultSet, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedResultSet, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedResultSet, decompressedlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedResultSet, decompresscodec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedResultSet, serializedtuples_),
  };
  SerializedResultSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SerializedResultSet_descriptor_,
      SerializedResultSet::default_instance_,
      SerializedResultSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedResultSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedResultSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SerializedResultSet));
  SubmitQueryResponse_descriptor_ = file->message_type(16);
  static const int SubmitQueryResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, querymasterhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, querymasterport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, resultset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, tabledesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, maxrownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, sessionvars_),
  };
  SubmitQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitQueryResponse_descriptor_,
      SubmitQueryResponse::default_instance_,
      SubmitQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitQueryResponse));
  SubmitQueryResponse_ResultType_descriptor_ = SubmitQueryResponse_descriptor_->enum_type(0);
  GetQueryStatusResponse_descriptor_ = file->message_type(17);
  static const int GetQueryStatusResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, query_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, submittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, hasresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, errortrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, querymasterhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, querymasterport_),
  };
  GetQueryStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryStatusResponse_descriptor_,
      GetQueryStatusResponse::default_instance_,
      GetQueryStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryStatusResponse));
  GetQueryResultDataRequest_descriptor_ = file->message_type(18);
  static const int GetQueryResultDataRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataRequest, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataRequest, fetchrownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataRequest, compresscodec_),
  };
  GetQueryResultDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryResultDataRequest_descriptor_,
      GetQueryResultDataRequest::default_instance_,
      GetQueryResultDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryResultDataRequest));
  GetQueryResultDataResponse_descriptor_ = file->message_type(19);
  static const int GetQueryResultDataResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataResponse, resultset_),
  };
  GetQueryResultDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryResultDataResponse_descriptor_,
      GetQueryResultDataResponse::default_instance_,
      GetQueryResultDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryResultDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryResultDataResponse));
  GetClusterInfoRequest_descriptor_ = file->message_type(20);
  static const int GetClusterInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoRequest, sessionid_),
  };
  GetClusterInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterInfoRequest_descriptor_,
      GetClusterInfoRequest::default_instance_,
      GetClusterInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterInfoRequest));
  WorkerResourceInfo_descriptor_ = file->message_type(21);
  static const int WorkerResourceInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, connectioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, totalresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, availableresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, numrunningtasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, workerstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, lastheartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, numquerymastertasks_),
  };
  WorkerResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerResourceInfo_descriptor_,
      WorkerResourceInfo::default_instance_,
      WorkerResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerResourceInfo));
  GetClusterInfoResponse_descriptor_ = file->message_type(22);
  static const int GetClusterInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoResponse, workerlist_),
  };
  GetClusterInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterInfoResponse_descriptor_,
      GetClusterInfoResponse::default_instance_,
      GetClusterInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterInfoResponse));
  CreateTableRequest_descriptor_ = file->message_type(23);
  static const int CreateTableRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, partition_),
  };
  CreateTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTableRequest_descriptor_,
      CreateTableRequest::default_instance_,
      CreateTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTableRequest));
  DropTableRequest_descriptor_ = file->message_type(24);
  static const int DropTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableRequest, purge_),
  };
  DropTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropTableRequest_descriptor_,
      DropTableRequest::default_instance_,
      DropTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropTableRequest));
  QueryInfoProto_descriptor_ = file->message_type(25);
  static const int QueryInfoProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, sql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, contextvars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, querystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, lastmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, hostnameofqm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, querymasterport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, querymasterclientport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, querymasterinfoport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, resultdesc_),
  };
  QueryInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryInfoProto_descriptor_,
      QueryInfoProto::default_instance_,
      QueryInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryInfoProto));
  StageHistoryProto_descriptor_ = file->message_type(26);
  static const int StageHistoryProto_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, executionblockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, succeededobjectcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, failedobjectcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, killedobjectcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, totalscheduledobjectscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, totalinputbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, totalreadbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, totalreadrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, totalwritebytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, totalwriterows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, numshuffles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, plan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, hostlocalassigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, racklocalassigned_),
  };
  StageHistoryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageHistoryProto_descriptor_,
      StageHistoryProto::default_instance_,
      StageHistoryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHistoryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageHistoryProto));
  QueryHistoryProto_descriptor_ = file->message_type(27);
  static const int QueryHistoryProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, querymaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, httpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, logicalplan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, distributedplan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, sessionvariables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, stagehistories_),
  };
  QueryHistoryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryHistoryProto_descriptor_,
      QueryHistoryProto::default_instance_,
      QueryHistoryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHistoryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryHistoryProto));
  GetQueryHistoryResponse_descriptor_ = file->message_type(28);
  static const int GetQueryHistoryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryHistoryResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryHistoryResponse, queryhistory_),
  };
  GetQueryHistoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryHistoryResponse_descriptor_,
      GetQueryHistoryResponse::default_instance_,
      GetQueryHistoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryHistoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryHistoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryHistoryResponse));
  GetQueryInfoResponse_descriptor_ = file->message_type(29);
  static const int GetQueryInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryInfoResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryInfoResponse, queryinfo_),
  };
  GetQueryInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueryInfoResponse_descriptor_,
      GetQueryInfoResponse::default_instance_,
      GetQueryInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueryInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueryInfoResponse));
  CreateIndexResponse_descriptor_ = file->message_type(30);
  static const int CreateIndexResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIndexResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIndexResponse, indexdesc_),
  };
  CreateIndexResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateIndexResponse_descriptor_,
      CreateIndexResponse::default_instance_,
      CreateIndexResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIndexResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateIndexResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateIndexResponse));
  GetIndexWithColumnsRequest_descriptor_ = file->message_type(31);
  static const int GetIndexWithColumnsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndexWithColumnsRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndexWithColumnsRequest, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndexWithColumnsRequest, columnnames_),
  };
  GetIndexWithColumnsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIndexWithColumnsRequest_descriptor_,
      GetIndexWithColumnsRequest::default_instance_,
      GetIndexWithColumnsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndexWithColumnsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndexWithColumnsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIndexWithColumnsRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientProtos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSessionRequest_descriptor_, &CreateSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSessionResponse_descriptor_, &CreateSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSessionVariableRequest_descriptor_, &UpdateSessionVariableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionUpdateResponse_descriptor_, &SessionUpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionedStringProto_descriptor_, &SessionedStringProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExplainQueryResponse_descriptor_, &ExplainQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRequest_descriptor_, &QueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateQueryResponse_descriptor_, &UpdateQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryResultRequest_descriptor_, &GetQueryResultRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryResultResponse_descriptor_, &GetQueryResultResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryIdRequest_descriptor_, &QueryIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryListRequest_descriptor_, &GetQueryListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BriefQueryInfo_descriptor_, &BriefQueryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryListResponse_descriptor_, &GetQueryListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryStatusRequest_descriptor_, &GetQueryStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SerializedResultSet_descriptor_, &SerializedResultSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitQueryResponse_descriptor_, &SubmitQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryStatusResponse_descriptor_, &GetQueryStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryResultDataRequest_descriptor_, &GetQueryResultDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryResultDataResponse_descriptor_, &GetQueryResultDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterInfoRequest_descriptor_, &GetClusterInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerResourceInfo_descriptor_, &WorkerResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterInfoResponse_descriptor_, &GetClusterInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTableRequest_descriptor_, &CreateTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropTableRequest_descriptor_, &DropTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryInfoProto_descriptor_, &QueryInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageHistoryProto_descriptor_, &StageHistoryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryHistoryProto_descriptor_, &QueryHistoryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryHistoryResponse_descriptor_, &GetQueryHistoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueryInfoResponse_descriptor_, &GetQueryInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateIndexResponse_descriptor_, &CreateIndexResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIndexWithColumnsRequest_descriptor_, &GetIndexWithColumnsRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientProtos_2eproto() {
  delete CreateSessionRequest::default_instance_;
  delete CreateSessionRequest_reflection_;
  delete CreateSessionResponse::default_instance_;
  delete CreateSessionResponse_reflection_;
  delete UpdateSessionVariableRequest::default_instance_;
  delete UpdateSessionVariableRequest_reflection_;
  delete SessionUpdateResponse::default_instance_;
  delete SessionUpdateResponse_reflection_;
  delete SessionedStringProto::default_instance_;
  delete SessionedStringProto_reflection_;
  delete ExplainQueryResponse::default_instance_;
  delete ExplainQueryResponse_reflection_;
  delete QueryRequest::default_instance_;
  delete QueryRequest_reflection_;
  delete UpdateQueryResponse::default_instance_;
  delete UpdateQueryResponse_reflection_;
  delete GetQueryResultRequest::default_instance_;
  delete GetQueryResultRequest_reflection_;
  delete GetQueryResultResponse::default_instance_;
  delete GetQueryResultResponse_reflection_;
  delete QueryIdRequest::default_instance_;
  delete QueryIdRequest_reflection_;
  delete GetQueryListRequest::default_instance_;
  delete GetQueryListRequest_reflection_;
  delete BriefQueryInfo::default_instance_;
  delete BriefQueryInfo_reflection_;
  delete GetQueryListResponse::default_instance_;
  delete GetQueryListResponse_reflection_;
  delete GetQueryStatusRequest::default_instance_;
  delete GetQueryStatusRequest_reflection_;
  delete SerializedResultSet::default_instance_;
  delete SerializedResultSet_reflection_;
  delete SubmitQueryResponse::default_instance_;
  delete SubmitQueryResponse_reflection_;
  delete GetQueryStatusResponse::default_instance_;
  delete GetQueryStatusResponse_reflection_;
  delete GetQueryResultDataRequest::default_instance_;
  delete GetQueryResultDataRequest_reflection_;
  delete GetQueryResultDataResponse::default_instance_;
  delete GetQueryResultDataResponse_reflection_;
  delete GetClusterInfoRequest::default_instance_;
  delete GetClusterInfoRequest_reflection_;
  delete WorkerResourceInfo::default_instance_;
  delete WorkerResourceInfo_reflection_;
  delete GetClusterInfoResponse::default_instance_;
  delete GetClusterInfoResponse_reflection_;
  delete CreateTableRequest::default_instance_;
  delete CreateTableRequest_reflection_;
  delete DropTableRequest::default_instance_;
  delete DropTableRequest_reflection_;
  delete QueryInfoProto::default_instance_;
  delete QueryInfoProto_reflection_;
  delete StageHistoryProto::default_instance_;
  delete StageHistoryProto_reflection_;
  delete QueryHistoryProto::default_instance_;
  delete QueryHistoryProto_reflection_;
  delete GetQueryHistoryResponse::default_instance_;
  delete GetQueryHistoryResponse_reflection_;
  delete GetQueryInfoResponse::default_instance_;
  delete GetQueryInfoResponse_reflection_;
  delete CreateIndexResponse::default_instance_;
  delete CreateIndexResponse_reflection_;
  delete GetIndexWithColumnsRequest::default_instance_;
  delete GetIndexWithColumnsRequest_reflection_;
}

void protobuf_AddDesc_ClientProtos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_tajo_5fprotos_2eproto();
  ::protobuf_AddDesc_TajoIdProtos_2eproto();
  ::protobuf_AddDesc_CatalogProtos_2eproto();
  ::protobuf_AddDesc_PrimitiveProtos_2eproto();
  ::protobuf_AddDesc_DataTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ClientProtos.proto\022\013tajo.client\032\021tajo_"
    "protos.proto\032\022TajoIdProtos.proto\032\023Catalo"
    "gProtos.proto\032\025PrimitiveProtos.proto\032\017Da"
    "taTypes.proto\"B\n\024CreateSessionRequest\022\020\n"
    "\010username\030\001 \002(\t\022\030\n\020baseDatabaseName\030\002 \001("
    "\t\"\200\001\n\025CreateSessionResponse\022\033\n\005state\030\001 \002"
    "(\0132\014.ReturnState\022\"\n\tsessionId\030\002 \001(\0132\017.Se"
    "ssionIdProto\022&\n\013sessionVars\030\003 \001(\0132\021.KeyV"
    "alueSetProto\"\202\001\n\034UpdateSessionVariableRe"
    "quest\022\"\n\tsessionId\030\001 \001(\0132\017.SessionIdProt"
    "o\022&\n\013sessionVars\030\002 \001(\0132\021.KeyValueSetProt"
    "o\022\026\n\016unsetVariables\030\003 \003(\t\"\\\n\025SessionUpda"
    "teResponse\022\033\n\005state\030\001 \002(\0132\014.ReturnState\022"
    "&\n\013sessionVars\030\002 \001(\0132\021.KeyValueSetProto\""
    "I\n\024SessionedStringProto\022\"\n\tsessionId\030\001 \001"
    "(\0132\017.SessionIdProto\022\r\n\005value\030\002 \001(\t\"D\n\024Ex"
    "plainQueryResponse\022\033\n\005state\030\001 \002(\0132\014.Retu"
    "rnState\022\017\n\007explain\030\002 \001(\t\"v\n\014QueryRequest"
    "\022\"\n\tsessionId\030\001 \001(\0132\017.SessionIdProto\022\r\n\005"
    "query\030\002 \002(\t\022#\n\013sessionVars\030\003 \003(\0132\016.KeyVa"
    "lueProto\022\016\n\006isJson\030\004 \002(\010\"Z\n\023UpdateQueryR"
    "esponse\022\033\n\005state\030\001 \002(\0132\014.ReturnState\022&\n\013"
    "sessionVars\030\002 \001(\0132\021.KeyValueSetProto\"[\n\025"
    "GetQueryResultRequest\022\"\n\tsessionId\030\001 \001(\013"
    "2\017.SessionIdProto\022\036\n\007queryId\030\002 \002(\0132\r.Que"
    "ryIdProto\"o\n\026GetQueryResultResponse\022\033\n\005s"
    "tate\030\001 \002(\0132\014.ReturnState\022\"\n\ttableDesc\030\002 "
    "\001(\0132\017.TableDescProto\022\024\n\014tajoUserName\030\003 \001"
    "(\t\"T\n\016QueryIdRequest\022\"\n\tsessionId\030\001 \001(\0132"
    "\017.SessionIdProto\022\036\n\007queryId\030\002 \002(\0132\r.Quer"
    "yIdProto\"9\n\023GetQueryListRequest\022\"\n\tsessi"
    "onId\030\001 \001(\0132\017.SessionIdProto\"\306\001\n\016BriefQue"
    "ryInfo\022\036\n\007queryId\030\001 \002(\0132\r.QueryIdProto\022\032"
    "\n\005state\030\002 \002(\0162\013.QueryState\022\021\n\tstartTime\030"
    "\003 \002(\003\022\022\n\nfinishTime\030\004 \002(\003\022\r\n\005query\030\005 \002(\t"
    "\022\027\n\017queryMasterHost\030\006 \001(\t\022\027\n\017queryMaster"
    "Port\030\007 \001(\005\022\020\n\010progress\030\010 \002(\002\"c\n\024GetQuery"
    "ListResponse\022\033\n\005state\030\001 \002(\0132\014.ReturnStat"
    "e\022.\n\tqueryList\030\002 \003(\0132\033.tajo.client.Brief"
    "QueryInfo\"[\n\025GetQueryStatusRequest\022\"\n\tse"
    "ssionId\030\001 \001(\0132\017.SessionIdProto\022\036\n\007queryI"
    "d\030\002 \002(\0132\r.QueryIdProto\"\234\001\n\023SerializedRes"
    "ultSet\022\034\n\006schema\030\001 \002(\0132\014.SchemaProto\022\014\n\004"
    "rows\030\002 \002(\005\022\032\n\022decompressedLength\030\003 \001(\005\022#"
    "\n\017decompressCodec\030\004 \001(\0162\n.CodecType\022\030\n\020s"
    "erializedTuples\030\005 \001(\014\"\242\003\n\023SubmitQueryRes"
    "ponse\022\033\n\005state\030\001 \002(\0132\014.ReturnState\022@\n\013re"
    "sult_type\030\002 \001(\0162+.tajo.client.SubmitQuer"
    "yResponse.ResultType\022\036\n\007queryId\030\003 \001(\0132\r."
    "QueryIdProto\022\020\n\010userName\030\004 \001(\t\022\027\n\017queryM"
    "asterHost\030\006 \001(\t\022\027\n\017queryMasterPort\030\007 \001(\005"
    "\0223\n\tresultSet\030\010 \001(\0132 .tajo.client.Serial"
    "izedResultSet\022\"\n\ttableDesc\030\t \001(\0132\017.Table"
    "DescProto\022\021\n\tmaxRowNum\030\n \001(\005\022&\n\013sessionV"
    "ars\030\013 \001(\0132\021.KeyValueSetProto\"4\n\nResultTy"
    "pe\022\r\n\tNO_RESULT\020\000\022\014\n\010ENCLOSED\020\001\022\t\n\005FETCH"
    "\020\002\"\240\002\n\026GetQueryStatusResponse\022\033\n\005state\030\001"
    " \002(\0132\014.ReturnState\022\036\n\007queryId\030\002 \001(\0132\r.Qu"
    "eryIdProto\022 \n\013query_state\030\003 \001(\0162\013.QueryS"
    "tate\022\020\n\010progress\030\004 \001(\002\022\022\n\nsubmitTime\030\005 \001"
    "(\003\022\022\n\nfinishTime\030\007 \001(\003\022\021\n\thasResult\030\010 \001("
    "\010\022\024\n\014errorMessage\030\t \001(\t\022\022\n\nerrorTrace\030\n "
    "\001(\t\022\027\n\017queryMasterHost\030\013 \001(\t\022\027\n\017queryMas"
    "terPort\030\014 \001(\005\"\227\001\n\031GetQueryResultDataRequ"
    "est\022\"\n\tsessionId\030\001 \002(\0132\017.SessionIdProto\022"
    "\036\n\007queryId\030\002 \002(\0132\r.QueryIdProto\022\023\n\013fetch"
    "RowNum\030\003 \002(\005\022!\n\rcompressCodec\030\004 \001(\0162\n.Co"
    "decType\"n\n\032GetQueryResultDataResponse\022\033\n"
    "\005state\030\001 \002(\0132\014.ReturnState\0223\n\tresultSet\030"
    "\002 \001(\0132 .tajo.client.SerializedResultSet\""
    ";\n\025GetClusterInfoRequest\022\"\n\tsessionId\030\001 "
    "\001(\0132\017.SessionIdProto\"\205\002\n\022WorkerResourceI"
    "nfo\0222\n\016connectionInfo\030\001 \002(\0132\032.WorkerConn"
    "ectionInfoProto\022)\n\rtotalResource\030\002 \002(\0132\022"
    ".NodeResourceProto\022-\n\021availableResource\030"
    "\003 \002(\0132\022.NodeResourceProto\022\027\n\017numRunningT"
    "asks\030\004 \002(\005\022\024\n\014workerStatus\030\005 \002(\t\022\025\n\rlast"
    "Heartbeat\030\006 \002(\003\022\033\n\023numQueryMasterTasks\030\007"
    " \002(\005\"j\n\026GetClusterInfoResponse\022\033\n\005state\030"
    "\001 \002(\0132\014.ReturnState\0223\n\nworkerList\030\002 \003(\0132"
    "\037.tajo.client.WorkerResourceInfo\"\267\001\n\022Cre"
    "ateTableRequest\022\"\n\tsessionId\030\001 \001(\0132\017.Ses"
    "sionIdProto\022\014\n\004name\030\002 \002(\t\022\034\n\006schema\030\003 \001("
    "\0132\014.SchemaProto\022\031\n\004meta\030\004 \002(\0132\013.TablePro"
    "to\022\014\n\004path\030\005 \002(\t\022(\n\tpartition\030\006 \001(\0132\025.Pa"
    "rtitionMethodProto\"Z\n\020DropTableRequest\022\""
    "\n\tsessionId\030\001 \001(\0132\017.SessionIdProto\022\014\n\004na"
    "me\030\002 \002(\t\022\024\n\005purge\030\003 \001(\010:\005false\"\325\002\n\016Query"
    "InfoProto\022\017\n\007queryId\030\001 \002(\t\022\013\n\003sql\030\002 \001(\t\022"
    "&\n\013contextVars\030\003 \001(\0132\021.KeyValueSetProto\022"
    "\037\n\nqueryState\030\004 \001(\0162\013.QueryState\022\020\n\010prog"
    "ress\030\005 \001(\002\022\021\n\tstartTime\030\006 \001(\003\022\022\n\nfinishT"
    "ime\030\007 \001(\003\022\023\n\013lastMessage\030\010 \001(\t\022\024\n\014hostNa"
    "meOfQM\030\t \001(\t\022\027\n\017queryMasterPort\030\n \001(\005\022\035\n"
    "\025queryMasterClientPort\030\013 \001(\005\022\033\n\023queryMas"
    "terInfoPort\030\014 \001(\005\022#\n\nresultDesc\030\r \001(\0132\017."
    "TableDescProto\"\277\003\n\021StageHistoryProto\022\030\n\020"
    "executionBlockId\030\001 \002(\t\022\r\n\005state\030\002 \002(\t\022\021\n"
    "\tstartTime\030\003 \001(\003\022\022\n\nfinishTime\030\004 \001(\003\022\034\n\024"
    "succeededObjectCount\030\005 \001(\005\022\031\n\021failedObje"
    "ctCount\030\006 \001(\005\022\031\n\021killedObjectCount\030\007 \001(\005"
    "\022\"\n\032totalScheduledObjectsCount\030\010 \001(\005\022\027\n\017"
    "totalInputBytes\030\t \001(\003\022\026\n\016totalReadBytes\030"
    "\n \001(\003\022\025\n\rtotalReadRows\030\013 \001(\003\022\027\n\017totalWri"
    "teBytes\030\014 \001(\003\022\026\n\016totalWriteRows\030\r \001(\003\022\023\n"
    "\013numShuffles\030\016 \001(\005\022\020\n\010progress\030\017 \001(\002\022\014\n\004"
    "plan\030\020 \001(\t\022\031\n\021hostLocalAssigned\030\021 \001(\005\022\031\n"
    "\021rackLocalAssigned\030\022 \001(\005\"\333\001\n\021QueryHistor"
    "yProto\022\017\n\007queryId\030\001 \002(\t\022\023\n\013queryMaster\030\002"
    " \001(\t\022\020\n\010httpPort\030\003 \001(\005\022\023\n\013logicalPlan\030\004 "
    "\001(\t\022\027\n\017distributedPlan\030\005 \001(\t\022(\n\020sessionV"
    "ariables\030\006 \003(\0132\016.KeyValueProto\0226\n\016stageH"
    "istories\030\007 \003(\0132\036.tajo.client.StageHistor"
    "yProto\"l\n\027GetQueryHistoryResponse\022\033\n\005sta"
    "te\030\001 \002(\0132\014.ReturnState\0224\n\014queryHistory\030\002"
    " \001(\0132\036.tajo.client.QueryHistoryProto\"c\n\024"
    "GetQueryInfoResponse\022\033\n\005state\030\001 \002(\0132\014.Re"
    "turnState\022.\n\tqueryInfo\030\002 \001(\0132\033.tajo.clie"
    "nt.QueryInfoProto\"W\n\023CreateIndexResponse"
    "\022\034\n\006result\030\001 \002(\0132\014.ReturnState\022\"\n\tindexD"
    "esc\030\002 \001(\0132\017.IndexDescProto\"h\n\032GetIndexWi"
    "thColumnsRequest\022\"\n\tsessionId\030\001 \002(\0132\017.Se"
    "ssionIdProto\022\021\n\ttableName\030\002 \002(\t\022\023\n\013colum"
    "nNames\030\003 \003(\tB)\n\023org.apache.tajo.ipcB\014Cli"
    "entProtos\210\001\001\240\001\001", 4975);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientProtos.proto", &protobuf_RegisterTypes);
  CreateSessionRequest::default_instance_ = new CreateSessionRequest();
  CreateSessionResponse::default_instance_ = new CreateSessionResponse();
  UpdateSessionVariableRequest::default_instance_ = new UpdateSessionVariableRequest();
  SessionUpdateResponse::default_instance_ = new SessionUpdateResponse();
  SessionedStringProto::default_instance_ = new SessionedStringProto();
  ExplainQueryResponse::default_instance_ = new ExplainQueryResponse();
  QueryRequest::default_instance_ = new QueryRequest();
  UpdateQueryResponse::default_instance_ = new UpdateQueryResponse();
  GetQueryResultRequest::default_instance_ = new GetQueryResultRequest();
  GetQueryResultResponse::default_instance_ = new GetQueryResultResponse();
  QueryIdRequest::default_instance_ = new QueryIdRequest();
  GetQueryListRequest::default_instance_ = new GetQueryListRequest();
  BriefQueryInfo::default_instance_ = new BriefQueryInfo();
  GetQueryListResponse::default_instance_ = new GetQueryListResponse();
  GetQueryStatusRequest::default_instance_ = new GetQueryStatusRequest();
  SerializedResultSet::default_instance_ = new SerializedResultSet();
  SubmitQueryResponse::default_instance_ = new SubmitQueryResponse();
  GetQueryStatusResponse::default_instance_ = new GetQueryStatusResponse();
  GetQueryResultDataRequest::default_instance_ = new GetQueryResultDataRequest();
  GetQueryResultDataResponse::default_instance_ = new GetQueryResultDataResponse();
  GetClusterInfoRequest::default_instance_ = new GetClusterInfoRequest();
  WorkerResourceInfo::default_instance_ = new WorkerResourceInfo();
  GetClusterInfoResponse::default_instance_ = new GetClusterInfoResponse();
  CreateTableRequest::default_instance_ = new CreateTableRequest();
  DropTableRequest::default_instance_ = new DropTableRequest();
  QueryInfoProto::default_instance_ = new QueryInfoProto();
  StageHistoryProto::default_instance_ = new StageHistoryProto();
  QueryHistoryProto::default_instance_ = new QueryHistoryProto();
  GetQueryHistoryResponse::default_instance_ = new GetQueryHistoryResponse();
  GetQueryInfoResponse::default_instance_ = new GetQueryInfoResponse();
  CreateIndexResponse::default_instance_ = new CreateIndexResponse();
  GetIndexWithColumnsRequest::default_instance_ = new GetIndexWithColumnsRequest();
  CreateSessionRequest::default_instance_->InitAsDefaultInstance();
  CreateSessionResponse::default_instance_->InitAsDefaultInstance();
  UpdateSessionVariableRequest::default_instance_->InitAsDefaultInstance();
  SessionUpdateResponse::default_instance_->InitAsDefaultInstance();
  SessionedStringProto::default_instance_->InitAsDefaultInstance();
  ExplainQueryResponse::default_instance_->InitAsDefaultInstance();
  QueryRequest::default_instance_->InitAsDefaultInstance();
  UpdateQueryResponse::default_instance_->InitAsDefaultInstance();
  GetQueryResultRequest::default_instance_->InitAsDefaultInstance();
  GetQueryResultResponse::default_instance_->InitAsDefaultInstance();
  QueryIdRequest::default_instance_->InitAsDefaultInstance();
  GetQueryListRequest::default_instance_->InitAsDefaultInstance();
  BriefQueryInfo::default_instance_->InitAsDefaultInstance();
  GetQueryListResponse::default_instance_->InitAsDefaultInstance();
  GetQueryStatusRequest::default_instance_->InitAsDefaultInstance();
  SerializedResultSet::default_instance_->InitAsDefaultInstance();
  SubmitQueryResponse::default_instance_->InitAsDefaultInstance();
  GetQueryStatusResponse::default_instance_->InitAsDefaultInstance();
  GetQueryResultDataRequest::default_instance_->InitAsDefaultInstance();
  GetQueryResultDataResponse::default_instance_->InitAsDefaultInstance();
  GetClusterInfoRequest::default_instance_->InitAsDefaultInstance();
  WorkerResourceInfo::default_instance_->InitAsDefaultInstance();
  GetClusterInfoResponse::default_instance_->InitAsDefaultInstance();
  CreateTableRequest::default_instance_->InitAsDefaultInstance();
  DropTableRequest::default_instance_->InitAsDefaultInstance();
  QueryInfoProto::default_instance_->InitAsDefaultInstance();
  StageHistoryProto::default_instance_->InitAsDefaultInstance();
  QueryHistoryProto::default_instance_->InitAsDefaultInstance();
  GetQueryHistoryResponse::default_instance_->InitAsDefaultInstance();
  GetQueryInfoResponse::default_instance_->InitAsDefaultInstance();
  CreateIndexResponse::default_instance_->InitAsDefaultInstance();
  GetIndexWithColumnsRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientProtos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientProtos_2eproto {
  StaticDescriptorInitializer_ClientProtos_2eproto() {
    protobuf_AddDesc_ClientProtos_2eproto();
  }
} static_descriptor_initializer_ClientProtos_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateSessionRequest::kUsernameFieldNumber;
const int CreateSessionRequest::kBaseDatabaseNameFieldNumber;
#endif  // !_MSC_VER

CreateSessionRequest::CreateSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSessionRequest::InitAsDefaultInstance() {
}

CreateSessionRequest::CreateSessionRequest(const CreateSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  basedatabasename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSessionRequest::~CreateSessionRequest() {
  SharedDtor();
}

void CreateSessionRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (basedatabasename_ != &::google::protobuf::internal::kEmptyString) {
    delete basedatabasename_;
  }
  if (this != default_instance_) {
  }
}

void CreateSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionRequest_descriptor_;
}

const CreateSessionRequest& CreateSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

CreateSessionRequest* CreateSessionRequest::default_instance_ = NULL;

CreateSessionRequest* CreateSessionRequest::New() const {
  return new CreateSessionRequest;
}

void CreateSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_basedatabasename()) {
      if (basedatabasename_ != &::google::protobuf::internal::kEmptyString) {
        basedatabasename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseDatabaseName;
        break;
      }

      // optional string baseDatabaseName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseDatabaseName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basedatabasename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->basedatabasename().data(), this->basedatabasename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string baseDatabaseName = 2;
  if (has_basedatabasename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->basedatabasename().data(), this->basedatabasename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->basedatabasename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string baseDatabaseName = 2;
  if (has_basedatabasename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->basedatabasename().data(), this->basedatabasename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->basedatabasename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string baseDatabaseName = 2;
    if (has_basedatabasename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->basedatabasename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSessionRequest::MergeFrom(const CreateSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_basedatabasename()) {
      set_basedatabasename(from.basedatabasename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionRequest::CopyFrom(const CreateSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateSessionRequest::Swap(CreateSessionRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(basedatabasename_, other->basedatabasename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionRequest_descriptor_;
  metadata.reflection = CreateSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSessionResponse::kStateFieldNumber;
const int CreateSessionResponse::kSessionIdFieldNumber;
const int CreateSessionResponse::kSessionVarsFieldNumber;
#endif  // !_MSC_VER

CreateSessionResponse::CreateSessionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSessionResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
  sessionvars_ = const_cast< ::KeyValueSetProto*>(&::KeyValueSetProto::default_instance());
}

CreateSessionResponse::CreateSessionResponse(const CreateSessionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSessionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  sessionid_ = NULL;
  sessionvars_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSessionResponse::~CreateSessionResponse() {
  SharedDtor();
}

void CreateSessionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete sessionid_;
    delete sessionvars_;
  }
}

void CreateSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionResponse_descriptor_;
}

const CreateSessionResponse& CreateSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

CreateSessionResponse* CreateSessionResponse::default_instance_ = NULL;

CreateSessionResponse* CreateSessionResponse::New() const {
  return new CreateSessionResponse;
}

void CreateSessionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_sessionvars()) {
      if (sessionvars_ != NULL) sessionvars_->::KeyValueSetProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sessionId;
        break;
      }

      // optional .SessionIdProto sessionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sessionVars;
        break;
      }

      // optional .KeyValueSetProto sessionVars = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionVars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionvars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .SessionIdProto sessionId = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sessionid(), output);
  }

  // optional .KeyValueSetProto sessionVars = 3;
  if (has_sessionvars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sessionvars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSessionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .SessionIdProto sessionId = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sessionid(), target);
  }

  // optional .KeyValueSetProto sessionVars = 3;
  if (has_sessionvars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sessionvars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSessionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .SessionIdProto sessionId = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // optional .KeyValueSetProto sessionVars = 3;
    if (has_sessionvars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionvars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSessionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSessionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSessionResponse::MergeFrom(const CreateSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_sessionvars()) {
      mutable_sessionvars()->::KeyValueSetProto::MergeFrom(from.sessionvars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionResponse::CopyFrom(const CreateSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  if (has_sessionvars()) {
    if (!this->sessionvars().IsInitialized()) return false;
  }
  return true;
}

void CreateSessionResponse::Swap(CreateSessionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(sessionvars_, other->sessionvars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionResponse_descriptor_;
  metadata.reflection = CreateSessionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSessionVariableRequest::kSessionIdFieldNumber;
const int UpdateSessionVariableRequest::kSessionVarsFieldNumber;
const int UpdateSessionVariableRequest::kUnsetVariablesFieldNumber;
#endif  // !_MSC_VER

UpdateSessionVariableRequest::UpdateSessionVariableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSessionVariableRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
  sessionvars_ = const_cast< ::KeyValueSetProto*>(&::KeyValueSetProto::default_instance());
}

UpdateSessionVariableRequest::UpdateSessionVariableRequest(const UpdateSessionVariableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSessionVariableRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  sessionvars_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSessionVariableRequest::~UpdateSessionVariableRequest() {
  SharedDtor();
}

void UpdateSessionVariableRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sessionid_;
    delete sessionvars_;
  }
}

void UpdateSessionVariableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSessionVariableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSessionVariableRequest_descriptor_;
}

const UpdateSessionVariableRequest& UpdateSessionVariableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

UpdateSessionVariableRequest* UpdateSessionVariableRequest::default_instance_ = NULL;

UpdateSessionVariableRequest* UpdateSessionVariableRequest::New() const {
  return new UpdateSessionVariableRequest;
}

void UpdateSessionVariableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_sessionvars()) {
      if (sessionvars_ != NULL) sessionvars_->::KeyValueSetProto::Clear();
    }
  }
  unsetvariables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSessionVariableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sessionVars;
        break;
      }

      // optional .KeyValueSetProto sessionVars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionVars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionvars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unsetVariables;
        break;
      }

      // repeated string unsetVariables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unsetVariables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unsetvariables()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unsetvariables(this->unsetvariables_size() - 1).data(),
            this->unsetvariables(this->unsetvariables_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unsetVariables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSessionVariableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // optional .KeyValueSetProto sessionVars = 2;
  if (has_sessionvars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sessionvars(), output);
  }

  // repeated string unsetVariables = 3;
  for (int i = 0; i < this->unsetvariables_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unsetvariables(i).data(), this->unsetvariables(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->unsetvariables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSessionVariableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // optional .KeyValueSetProto sessionVars = 2;
  if (has_sessionvars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sessionvars(), target);
  }

  // repeated string unsetVariables = 3;
  for (int i = 0; i < this->unsetvariables_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unsetvariables(i).data(), this->unsetvariables(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->unsetvariables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSessionVariableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // optional .KeyValueSetProto sessionVars = 2;
    if (has_sessionvars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionvars());
    }

  }
  // repeated string unsetVariables = 3;
  total_size += 1 * this->unsetvariables_size();
  for (int i = 0; i < this->unsetvariables_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unsetvariables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSessionVariableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSessionVariableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSessionVariableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSessionVariableRequest::MergeFrom(const UpdateSessionVariableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  unsetvariables_.MergeFrom(from.unsetvariables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_sessionvars()) {
      mutable_sessionvars()->::KeyValueSetProto::MergeFrom(from.sessionvars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSessionVariableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSessionVariableRequest::CopyFrom(const UpdateSessionVariableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSessionVariableRequest::IsInitialized() const {

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  if (has_sessionvars()) {
    if (!this->sessionvars().IsInitialized()) return false;
  }
  return true;
}

void UpdateSessionVariableRequest::Swap(UpdateSessionVariableRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(sessionvars_, other->sessionvars_);
    unsetvariables_.Swap(&other->unsetvariables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSessionVariableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSessionVariableRequest_descriptor_;
  metadata.reflection = UpdateSessionVariableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionUpdateResponse::kStateFieldNumber;
const int SessionUpdateResponse::kSessionVarsFieldNumber;
#endif  // !_MSC_VER

SessionUpdateResponse::SessionUpdateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionUpdateResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  sessionvars_ = const_cast< ::KeyValueSetProto*>(&::KeyValueSetProto::default_instance());
}

SessionUpdateResponse::SessionUpdateResponse(const SessionUpdateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  sessionvars_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionUpdateResponse::~SessionUpdateResponse() {
  SharedDtor();
}

void SessionUpdateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete sessionvars_;
  }
}

void SessionUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionUpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionUpdateResponse_descriptor_;
}

const SessionUpdateResponse& SessionUpdateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

SessionUpdateResponse* SessionUpdateResponse::default_instance_ = NULL;

SessionUpdateResponse* SessionUpdateResponse::New() const {
  return new SessionUpdateResponse;
}

void SessionUpdateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_sessionvars()) {
      if (sessionvars_ != NULL) sessionvars_->::KeyValueSetProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sessionVars;
        break;
      }

      // optional .KeyValueSetProto sessionVars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionVars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionvars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .KeyValueSetProto sessionVars = 2;
  if (has_sessionvars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sessionvars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionUpdateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .KeyValueSetProto sessionVars = 2;
  if (has_sessionvars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sessionvars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionUpdateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .KeyValueSetProto sessionVars = 2;
    if (has_sessionvars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionvars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionUpdateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionUpdateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionUpdateResponse::MergeFrom(const SessionUpdateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_sessionvars()) {
      mutable_sessionvars()->::KeyValueSetProto::MergeFrom(from.sessionvars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionUpdateResponse::CopyFrom(const SessionUpdateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionUpdateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_sessionvars()) {
    if (!this->sessionvars().IsInitialized()) return false;
  }
  return true;
}

void SessionUpdateResponse::Swap(SessionUpdateResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(sessionvars_, other->sessionvars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionUpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionUpdateResponse_descriptor_;
  metadata.reflection = SessionUpdateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionedStringProto::kSessionIdFieldNumber;
const int SessionedStringProto::kValueFieldNumber;
#endif  // !_MSC_VER

SessionedStringProto::SessionedStringProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionedStringProto::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
}

SessionedStringProto::SessionedStringProto(const SessionedStringProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionedStringProto::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionedStringProto::~SessionedStringProto() {
  SharedDtor();
}

void SessionedStringProto::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete sessionid_;
  }
}

void SessionedStringProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionedStringProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionedStringProto_descriptor_;
}

const SessionedStringProto& SessionedStringProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

SessionedStringProto* SessionedStringProto::default_instance_ = NULL;

SessionedStringProto* SessionedStringProto::New() const {
  return new SessionedStringProto;
}

void SessionedStringProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionedStringProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionedStringProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionedStringProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionedStringProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionedStringProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionedStringProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionedStringProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionedStringProto::MergeFrom(const SessionedStringProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionedStringProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionedStringProto::CopyFrom(const SessionedStringProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionedStringProto::IsInitialized() const {

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  return true;
}

void SessionedStringProto::Swap(SessionedStringProto* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionedStringProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionedStringProto_descriptor_;
  metadata.reflection = SessionedStringProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExplainQueryResponse::kStateFieldNumber;
const int ExplainQueryResponse::kExplainFieldNumber;
#endif  // !_MSC_VER

ExplainQueryResponse::ExplainQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExplainQueryResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
}

ExplainQueryResponse::ExplainQueryResponse(const ExplainQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExplainQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  explain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExplainQueryResponse::~ExplainQueryResponse() {
  SharedDtor();
}

void ExplainQueryResponse::SharedDtor() {
  if (explain_ != &::google::protobuf::internal::kEmptyString) {
    delete explain_;
  }
  if (this != default_instance_) {
    delete state_;
  }
}

void ExplainQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExplainQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExplainQueryResponse_descriptor_;
}

const ExplainQueryResponse& ExplainQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

ExplainQueryResponse* ExplainQueryResponse::default_instance_ = NULL;

ExplainQueryResponse* ExplainQueryResponse::New() const {
  return new ExplainQueryResponse;
}

void ExplainQueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_explain()) {
      if (explain_ != &::google::protobuf::internal::kEmptyString) {
        explain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExplainQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_explain;
        break;
      }

      // optional string explain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_explain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->explain().data(), this->explain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExplainQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional string explain = 2;
  if (has_explain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->explain().data(), this->explain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->explain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExplainQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional string explain = 2;
  if (has_explain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->explain().data(), this->explain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->explain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExplainQueryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional string explain = 2;
    if (has_explain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplainQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExplainQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExplainQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExplainQueryResponse::MergeFrom(const ExplainQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_explain()) {
      set_explain(from.explain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExplainQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplainQueryResponse::CopyFrom(const ExplainQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplainQueryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void ExplainQueryResponse::Swap(ExplainQueryResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(explain_, other->explain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExplainQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExplainQueryResponse_descriptor_;
  metadata.reflection = ExplainQueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRequest::kSessionIdFieldNumber;
const int QueryRequest::kQueryFieldNumber;
const int QueryRequest::kSessionVarsFieldNumber;
const int QueryRequest::kIsJsonFieldNumber;
#endif  // !_MSC_VER

QueryRequest::QueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
}

QueryRequest::QueryRequest(const QueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isjson_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRequest::~QueryRequest() {
  SharedDtor();
}

void QueryRequest::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
    delete sessionid_;
  }
}

void QueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRequest_descriptor_;
}

const QueryRequest& QueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

QueryRequest* QueryRequest::default_instance_ = NULL;

QueryRequest* QueryRequest::New() const {
  return new QueryRequest;
}

void QueryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    isjson_ = false;
  }
  sessionvars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query;
        break;
      }

      // required string query = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sessionVars;
        break;
      }

      // repeated .KeyValueProto sessionVars = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionVars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessionvars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sessionVars;
        if (input->ExpectTag(32)) goto parse_isJson;
        break;
      }

      // required bool isJson = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjson_)));
          set_has_isjson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // required string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->query(), output);
  }

  // repeated .KeyValueProto sessionVars = 3;
  for (int i = 0; i < this->sessionvars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sessionvars(i), output);
  }

  // required bool isJson = 4;
  if (has_isjson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isjson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // required string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // repeated .KeyValueProto sessionVars = 3;
  for (int i = 0; i < this->sessionvars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sessionvars(i), target);
  }

  // required bool isJson = 4;
  if (has_isjson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isjson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // required string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // required bool isJson = 4;
    if (has_isjson()) {
      total_size += 1 + 1;
    }

  }
  // repeated .KeyValueProto sessionVars = 3;
  total_size += 1 * this->sessionvars_size();
  for (int i = 0; i < this->sessionvars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sessionvars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  sessionvars_.MergeFrom(from.sessionvars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_isjson()) {
      set_isjson(from.isjson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  for (int i = 0; i < sessionvars_size(); i++) {
    if (!this->sessionvars(i).IsInitialized()) return false;
  }
  return true;
}

void QueryRequest::Swap(QueryRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(query_, other->query_);
    sessionvars_.Swap(&other->sessionvars_);
    std::swap(isjson_, other->isjson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRequest_descriptor_;
  metadata.reflection = QueryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateQueryResponse::kStateFieldNumber;
const int UpdateQueryResponse::kSessionVarsFieldNumber;
#endif  // !_MSC_VER

UpdateQueryResponse::UpdateQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateQueryResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  sessionvars_ = const_cast< ::KeyValueSetProto*>(&::KeyValueSetProto::default_instance());
}

UpdateQueryResponse::UpdateQueryResponse(const UpdateQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  sessionvars_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateQueryResponse::~UpdateQueryResponse() {
  SharedDtor();
}

void UpdateQueryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete sessionvars_;
  }
}

void UpdateQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateQueryResponse_descriptor_;
}

const UpdateQueryResponse& UpdateQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

UpdateQueryResponse* UpdateQueryResponse::default_instance_ = NULL;

UpdateQueryResponse* UpdateQueryResponse::New() const {
  return new UpdateQueryResponse;
}

void UpdateQueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_sessionvars()) {
      if (sessionvars_ != NULL) sessionvars_->::KeyValueSetProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sessionVars;
        break;
      }

      // optional .KeyValueSetProto sessionVars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionVars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionvars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .KeyValueSetProto sessionVars = 2;
  if (has_sessionvars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sessionvars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .KeyValueSetProto sessionVars = 2;
  if (has_sessionvars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sessionvars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateQueryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .KeyValueSetProto sessionVars = 2;
    if (has_sessionvars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionvars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateQueryResponse::MergeFrom(const UpdateQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_sessionvars()) {
      mutable_sessionvars()->::KeyValueSetProto::MergeFrom(from.sessionvars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateQueryResponse::CopyFrom(const UpdateQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateQueryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_sessionvars()) {
    if (!this->sessionvars().IsInitialized()) return false;
  }
  return true;
}

void UpdateQueryResponse::Swap(UpdateQueryResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(sessionvars_, other->sessionvars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateQueryResponse_descriptor_;
  metadata.reflection = UpdateQueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryResultRequest::kSessionIdFieldNumber;
const int GetQueryResultRequest::kQueryIdFieldNumber;
#endif  // !_MSC_VER

GetQueryResultRequest::GetQueryResultRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryResultRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
  queryid_ = const_cast< ::QueryIdProto*>(&::QueryIdProto::default_instance());
}

GetQueryResultRequest::GetQueryResultRequest(const GetQueryResultRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryResultRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  queryid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryResultRequest::~GetQueryResultRequest() {
  SharedDtor();
}

void GetQueryResultRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sessionid_;
    delete queryid_;
  }
}

void GetQueryResultRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryResultRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryResultRequest_descriptor_;
}

const GetQueryResultRequest& GetQueryResultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryResultRequest* GetQueryResultRequest::default_instance_ = NULL;

GetQueryResultRequest* GetQueryResultRequest::New() const {
  return new GetQueryResultRequest;
}

void GetQueryResultRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_queryid()) {
      if (queryid_ != NULL) queryid_->::QueryIdProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryResultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryId;
        break;
      }

      // required .QueryIdProto queryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryResultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // required .QueryIdProto queryId = 2;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryResultRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // required .QueryIdProto queryId = 2;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryResultRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // required .QueryIdProto queryId = 2;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryResultRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryResultRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryResultRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryResultRequest::MergeFrom(const GetQueryResultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_queryid()) {
      mutable_queryid()->::QueryIdProto::MergeFrom(from.queryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryResultRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryResultRequest::CopyFrom(const GetQueryResultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryResultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  if (has_queryid()) {
    if (!this->queryid().IsInitialized()) return false;
  }
  return true;
}

void GetQueryResultRequest::Swap(GetQueryResultRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(queryid_, other->queryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryResultRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryResultRequest_descriptor_;
  metadata.reflection = GetQueryResultRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryResultResponse::kStateFieldNumber;
const int GetQueryResultResponse::kTableDescFieldNumber;
const int GetQueryResultResponse::kTajoUserNameFieldNumber;
#endif  // !_MSC_VER

GetQueryResultResponse::GetQueryResultResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryResultResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  tabledesc_ = const_cast< ::TableDescProto*>(&::TableDescProto::default_instance());
}

GetQueryResultResponse::GetQueryResultResponse(const GetQueryResultResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryResultResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  tabledesc_ = NULL;
  tajousername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryResultResponse::~GetQueryResultResponse() {
  SharedDtor();
}

void GetQueryResultResponse::SharedDtor() {
  if (tajousername_ != &::google::protobuf::internal::kEmptyString) {
    delete tajousername_;
  }
  if (this != default_instance_) {
    delete state_;
    delete tabledesc_;
  }
}

void GetQueryResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryResultResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryResultResponse_descriptor_;
}

const GetQueryResultResponse& GetQueryResultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryResultResponse* GetQueryResultResponse::default_instance_ = NULL;

GetQueryResultResponse* GetQueryResultResponse::New() const {
  return new GetQueryResultResponse;
}

void GetQueryResultResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_tabledesc()) {
      if (tabledesc_ != NULL) tabledesc_->::TableDescProto::Clear();
    }
    if (has_tajousername()) {
      if (tajousername_ != &::google::protobuf::internal::kEmptyString) {
        tajousername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tableDesc;
        break;
      }

      // optional .TableDescProto tableDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tabledesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tajoUserName;
        break;
      }

      // optional string tajoUserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tajoUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tajousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tajousername().data(), this->tajousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .TableDescProto tableDesc = 2;
  if (has_tabledesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tabledesc(), output);
  }

  // optional string tajoUserName = 3;
  if (has_tajousername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tajousername().data(), this->tajousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tajousername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryResultResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .TableDescProto tableDesc = 2;
  if (has_tabledesc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tabledesc(), target);
  }

  // optional string tajoUserName = 3;
  if (has_tajousername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tajousername().data(), this->tajousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tajousername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryResultResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .TableDescProto tableDesc = 2;
    if (has_tabledesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tabledesc());
    }

    // optional string tajoUserName = 3;
    if (has_tajousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tajousername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryResultResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryResultResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryResultResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryResultResponse::MergeFrom(const GetQueryResultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_tabledesc()) {
      mutable_tabledesc()->::TableDescProto::MergeFrom(from.tabledesc());
    }
    if (from.has_tajousername()) {
      set_tajousername(from.tajousername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryResultResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryResultResponse::CopyFrom(const GetQueryResultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryResultResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_tabledesc()) {
    if (!this->tabledesc().IsInitialized()) return false;
  }
  return true;
}

void GetQueryResultResponse::Swap(GetQueryResultResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(tabledesc_, other->tabledesc_);
    std::swap(tajousername_, other->tajousername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryResultResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryResultResponse_descriptor_;
  metadata.reflection = GetQueryResultResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryIdRequest::kSessionIdFieldNumber;
const int QueryIdRequest::kQueryIdFieldNumber;
#endif  // !_MSC_VER

QueryIdRequest::QueryIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryIdRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
  queryid_ = const_cast< ::QueryIdProto*>(&::QueryIdProto::default_instance());
}

QueryIdRequest::QueryIdRequest(const QueryIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryIdRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  queryid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryIdRequest::~QueryIdRequest() {
  SharedDtor();
}

void QueryIdRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sessionid_;
    delete queryid_;
  }
}

void QueryIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryIdRequest_descriptor_;
}

const QueryIdRequest& QueryIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

QueryIdRequest* QueryIdRequest::default_instance_ = NULL;

QueryIdRequest* QueryIdRequest::New() const {
  return new QueryIdRequest;
}

void QueryIdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_queryid()) {
      if (queryid_ != NULL) queryid_->::QueryIdProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryId;
        break;
      }

      // required .QueryIdProto queryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // required .QueryIdProto queryId = 2;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // required .QueryIdProto queryId = 2;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // required .QueryIdProto queryId = 2;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryIdRequest::MergeFrom(const QueryIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_queryid()) {
      mutable_queryid()->::QueryIdProto::MergeFrom(from.queryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryIdRequest::CopyFrom(const QueryIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  if (has_queryid()) {
    if (!this->queryid().IsInitialized()) return false;
  }
  return true;
}

void QueryIdRequest::Swap(QueryIdRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(queryid_, other->queryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryIdRequest_descriptor_;
  metadata.reflection = QueryIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryListRequest::kSessionIdFieldNumber;
#endif  // !_MSC_VER

GetQueryListRequest::GetQueryListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryListRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
}

GetQueryListRequest::GetQueryListRequest(const GetQueryListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryListRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryListRequest::~GetQueryListRequest() {
  SharedDtor();
}

void GetQueryListRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sessionid_;
  }
}

void GetQueryListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryListRequest_descriptor_;
}

const GetQueryListRequest& GetQueryListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryListRequest* GetQueryListRequest::default_instance_ = NULL;

GetQueryListRequest* GetQueryListRequest::New() const {
  return new GetQueryListRequest;
}

void GetQueryListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryListRequest::MergeFrom(const GetQueryListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryListRequest::CopyFrom(const GetQueryListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryListRequest::IsInitialized() const {

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  return true;
}

void GetQueryListRequest::Swap(GetQueryListRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryListRequest_descriptor_;
  metadata.reflection = GetQueryListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BriefQueryInfo::kQueryIdFieldNumber;
const int BriefQueryInfo::kStateFieldNumber;
const int BriefQueryInfo::kStartTimeFieldNumber;
const int BriefQueryInfo::kFinishTimeFieldNumber;
const int BriefQueryInfo::kQueryFieldNumber;
const int BriefQueryInfo::kQueryMasterHostFieldNumber;
const int BriefQueryInfo::kQueryMasterPortFieldNumber;
const int BriefQueryInfo::kProgressFieldNumber;
#endif  // !_MSC_VER

BriefQueryInfo::BriefQueryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BriefQueryInfo::InitAsDefaultInstance() {
  queryid_ = const_cast< ::QueryIdProto*>(&::QueryIdProto::default_instance());
}

BriefQueryInfo::BriefQueryInfo(const BriefQueryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BriefQueryInfo::SharedCtor() {
  _cached_size_ = 0;
  queryid_ = NULL;
  state_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  finishtime_ = GOOGLE_LONGLONG(0);
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querymasterhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querymasterport_ = 0;
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BriefQueryInfo::~BriefQueryInfo() {
  SharedDtor();
}

void BriefQueryInfo::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (querymasterhost_ != &::google::protobuf::internal::kEmptyString) {
    delete querymasterhost_;
  }
  if (this != default_instance_) {
    delete queryid_;
  }
}

void BriefQueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BriefQueryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BriefQueryInfo_descriptor_;
}

const BriefQueryInfo& BriefQueryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

BriefQueryInfo* BriefQueryInfo::default_instance_ = NULL;

BriefQueryInfo* BriefQueryInfo::New() const {
  return new BriefQueryInfo;
}

void BriefQueryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queryid()) {
      if (queryid_ != NULL) queryid_->::QueryIdProto::Clear();
    }
    state_ = 0;
    starttime_ = GOOGLE_LONGLONG(0);
    finishtime_ = GOOGLE_LONGLONG(0);
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    if (has_querymasterhost()) {
      if (querymasterhost_ != &::google::protobuf::internal::kEmptyString) {
        querymasterhost_->clear();
      }
    }
    querymasterport_ = 0;
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BriefQueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QueryIdProto queryId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .QueryState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QueryState_IsValid(value)) {
            set_state(static_cast< ::QueryState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // required int64 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finishTime;
        break;
      }

      // required int64 finishTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_query;
        break;
      }

      // required string query = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_queryMasterHost;
        break;
      }

      // optional string queryMasterHost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryMasterHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_querymasterhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->querymasterhost().data(), this->querymasterhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_queryMasterPort;
        break;
      }

      // optional int32 queryMasterPort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryMasterPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &querymasterport_)));
          set_has_querymasterport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_progress;
        break;
      }

      // required float progress = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BriefQueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QueryIdProto queryId = 1;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queryid(), output);
  }

  // required .QueryState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required int64 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->starttime(), output);
  }

  // required int64 finishTime = 4;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->finishtime(), output);
  }

  // required string query = 5;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->query(), output);
  }

  // optional string queryMasterHost = 6;
  if (has_querymasterhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->querymasterhost().data(), this->querymasterhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->querymasterhost(), output);
  }

  // optional int32 queryMasterPort = 7;
  if (has_querymasterport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->querymasterport(), output);
  }

  // required float progress = 8;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BriefQueryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QueryIdProto queryId = 1;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->queryid(), target);
  }

  // required .QueryState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required int64 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->starttime(), target);
  }

  // required int64 finishTime = 4;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->finishtime(), target);
  }

  // required string query = 5;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->query(), target);
  }

  // optional string queryMasterHost = 6;
  if (has_querymasterhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->querymasterhost().data(), this->querymasterhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->querymasterhost(), target);
  }

  // optional int32 queryMasterPort = 7;
  if (has_querymasterport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->querymasterport(), target);
  }

  // required float progress = 8;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BriefQueryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QueryIdProto queryId = 1;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryid());
    }

    // required .QueryState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required int64 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // required int64 finishTime = 4;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime());
    }

    // required string query = 5;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string queryMasterHost = 6;
    if (has_querymasterhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->querymasterhost());
    }

    // optional int32 queryMasterPort = 7;
    if (has_querymasterport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->querymasterport());
    }

    // required float progress = 8;
    if (has_progress()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BriefQueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BriefQueryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BriefQueryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BriefQueryInfo::MergeFrom(const BriefQueryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queryid()) {
      mutable_queryid()->::QueryIdProto::MergeFrom(from.queryid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_querymasterhost()) {
      set_querymasterhost(from.querymasterhost());
    }
    if (from.has_querymasterport()) {
      set_querymasterport(from.querymasterport());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BriefQueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BriefQueryInfo::CopyFrom(const BriefQueryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BriefQueryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009f) != 0x0000009f) return false;

  if (has_queryid()) {
    if (!this->queryid().IsInitialized()) return false;
  }
  return true;
}

void BriefQueryInfo::Swap(BriefQueryInfo* other) {
  if (other != this) {
    std::swap(queryid_, other->queryid_);
    std::swap(state_, other->state_);
    std::swap(starttime_, other->starttime_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(query_, other->query_);
    std::swap(querymasterhost_, other->querymasterhost_);
    std::swap(querymasterport_, other->querymasterport_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BriefQueryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BriefQueryInfo_descriptor_;
  metadata.reflection = BriefQueryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryListResponse::kStateFieldNumber;
const int GetQueryListResponse::kQueryListFieldNumber;
#endif  // !_MSC_VER

GetQueryListResponse::GetQueryListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryListResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
}

GetQueryListResponse::GetQueryListResponse(const GetQueryListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryListResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryListResponse::~GetQueryListResponse() {
  SharedDtor();
}

void GetQueryListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void GetQueryListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryListResponse_descriptor_;
}

const GetQueryListResponse& GetQueryListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryListResponse* GetQueryListResponse::default_instance_ = NULL;

GetQueryListResponse* GetQueryListResponse::New() const {
  return new GetQueryListResponse;
}

void GetQueryListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
  }
  querylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryList;
        break;
      }

      // repeated .tajo.client.BriefQueryInfo queryList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_querylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // repeated .tajo.client.BriefQueryInfo queryList = 2;
  for (int i = 0; i < this->querylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->querylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // repeated .tajo.client.BriefQueryInfo queryList = 2;
  for (int i = 0; i < this->querylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->querylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  // repeated .tajo.client.BriefQueryInfo queryList = 2;
  total_size += 1 * this->querylist_size();
  for (int i = 0; i < this->querylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->querylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryListResponse::MergeFrom(const GetQueryListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  querylist_.MergeFrom(from.querylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryListResponse::CopyFrom(const GetQueryListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  for (int i = 0; i < querylist_size(); i++) {
    if (!this->querylist(i).IsInitialized()) return false;
  }
  return true;
}

void GetQueryListResponse::Swap(GetQueryListResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    querylist_.Swap(&other->querylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryListResponse_descriptor_;
  metadata.reflection = GetQueryListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryStatusRequest::kSessionIdFieldNumber;
const int GetQueryStatusRequest::kQueryIdFieldNumber;
#endif  // !_MSC_VER

GetQueryStatusRequest::GetQueryStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryStatusRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
  queryid_ = const_cast< ::QueryIdProto*>(&::QueryIdProto::default_instance());
}

GetQueryStatusRequest::GetQueryStatusRequest(const GetQueryStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  queryid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryStatusRequest::~GetQueryStatusRequest() {
  SharedDtor();
}

void GetQueryStatusRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sessionid_;
    delete queryid_;
  }
}

void GetQueryStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryStatusRequest_descriptor_;
}

const GetQueryStatusRequest& GetQueryStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryStatusRequest* GetQueryStatusRequest::default_instance_ = NULL;

GetQueryStatusRequest* GetQueryStatusRequest::New() const {
  return new GetQueryStatusRequest;
}

void GetQueryStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_queryid()) {
      if (queryid_ != NULL) queryid_->::QueryIdProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryId;
        break;
      }

      // required .QueryIdProto queryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // required .QueryIdProto queryId = 2;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // required .QueryIdProto queryId = 2;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // required .QueryIdProto queryId = 2;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryStatusRequest::MergeFrom(const GetQueryStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_queryid()) {
      mutable_queryid()->::QueryIdProto::MergeFrom(from.queryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryStatusRequest::CopyFrom(const GetQueryStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  if (has_queryid()) {
    if (!this->queryid().IsInitialized()) return false;
  }
  return true;
}

void GetQueryStatusRequest::Swap(GetQueryStatusRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(queryid_, other->queryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryStatusRequest_descriptor_;
  metadata.reflection = GetQueryStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SerializedResultSet::kSchemaFieldNumber;
const int SerializedResultSet::kRowsFieldNumber;
const int SerializedResultSet::kDecompressedLengthFieldNumber;
const int SerializedResultSet::kDecompressCodecFieldNumber;
const int SerializedResultSet::kSerializedTuplesFieldNumber;
#endif  // !_MSC_VER

SerializedResultSet::SerializedResultSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SerializedResultSet::InitAsDefaultInstance() {
  schema_ = const_cast< ::SchemaProto*>(&::SchemaProto::default_instance());
}

SerializedResultSet::SerializedResultSet(const SerializedResultSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SerializedResultSet::SharedCtor() {
  _cached_size_ = 0;
  schema_ = NULL;
  rows_ = 0;
  decompressedlength_ = 0;
  decompresscodec_ = 0;
  serializedtuples_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerializedResultSet::~SerializedResultSet() {
  SharedDtor();
}

void SerializedResultSet::SharedDtor() {
  if (serializedtuples_ != &::google::protobuf::internal::kEmptyString) {
    delete serializedtuples_;
  }
  if (this != default_instance_) {
    delete schema_;
  }
}

void SerializedResultSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedResultSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedResultSet_descriptor_;
}

const SerializedResultSet& SerializedResultSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

SerializedResultSet* SerializedResultSet::default_instance_ = NULL;

SerializedResultSet* SerializedResultSet::New() const {
  return new SerializedResultSet;
}

void SerializedResultSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_schema()) {
      if (schema_ != NULL) schema_->::SchemaProto::Clear();
    }
    rows_ = 0;
    decompressedlength_ = 0;
    decompresscodec_ = 0;
    if (has_serializedtuples()) {
      if (serializedtuples_ != &::google::protobuf::internal::kEmptyString) {
        serializedtuples_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SerializedResultSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SchemaProto schema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rows;
        break;
      }

      // required int32 rows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_decompressedLength;
        break;
      }

      // optional int32 decompressedLength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decompressedLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decompressedlength_)));
          set_has_decompressedlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_decompressCodec;
        break;
      }

      // optional .CodecType decompressCodec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decompressCodec:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CodecType_IsValid(value)) {
            set_decompresscodec(static_cast< ::CodecType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serializedTuples;
        break;
      }

      // optional bytes serializedTuples = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serializedTuples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serializedtuples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SerializedResultSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SchemaProto schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schema(), output);
  }

  // required int32 rows = 2;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rows(), output);
  }

  // optional int32 decompressedLength = 3;
  if (has_decompressedlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->decompressedlength(), output);
  }

  // optional .CodecType decompressCodec = 4;
  if (has_decompresscodec()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->decompresscodec(), output);
  }

  // optional bytes serializedTuples = 5;
  if (has_serializedtuples()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->serializedtuples(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SerializedResultSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SchemaProto schema = 1;
  if (has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schema(), target);
  }

  // required int32 rows = 2;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rows(), target);
  }

  // optional int32 decompressedLength = 3;
  if (has_decompressedlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->decompressedlength(), target);
  }

  // optional .CodecType decompressCodec = 4;
  if (has_decompresscodec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->decompresscodec(), target);
  }

  // optional bytes serializedTuples = 5;
  if (has_serializedtuples()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->serializedtuples(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SerializedResultSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SchemaProto schema = 1;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema());
    }

    // required int32 rows = 2;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // optional int32 decompressedLength = 3;
    if (has_decompressedlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decompressedlength());
    }

    // optional .CodecType decompressCodec = 4;
    if (has_decompresscodec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->decompresscodec());
    }

    // optional bytes serializedTuples = 5;
    if (has_serializedtuples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serializedtuples());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedResultSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SerializedResultSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SerializedResultSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SerializedResultSet::MergeFrom(const SerializedResultSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema()) {
      mutable_schema()->::SchemaProto::MergeFrom(from.schema());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_decompressedlength()) {
      set_decompressedlength(from.decompressedlength());
    }
    if (from.has_decompresscodec()) {
      set_decompresscodec(from.decompresscodec());
    }
    if (from.has_serializedtuples()) {
      set_serializedtuples(from.serializedtuples());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SerializedResultSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedResultSet::CopyFrom(const SerializedResultSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedResultSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_schema()) {
    if (!this->schema().IsInitialized()) return false;
  }
  return true;
}

void SerializedResultSet::Swap(SerializedResultSet* other) {
  if (other != this) {
    std::swap(schema_, other->schema_);
    std::swap(rows_, other->rows_);
    std::swap(decompressedlength_, other->decompressedlength_);
    std::swap(decompresscodec_, other->decompresscodec_);
    std::swap(serializedtuples_, other->serializedtuples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SerializedResultSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedResultSet_descriptor_;
  metadata.reflection = SerializedResultSet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SubmitQueryResponse_ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitQueryResponse_ResultType_descriptor_;
}
bool SubmitQueryResponse_ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SubmitQueryResponse_ResultType SubmitQueryResponse::NO_RESULT;
const SubmitQueryResponse_ResultType SubmitQueryResponse::ENCLOSED;
const SubmitQueryResponse_ResultType SubmitQueryResponse::FETCH;
const SubmitQueryResponse_ResultType SubmitQueryResponse::ResultType_MIN;
const SubmitQueryResponse_ResultType SubmitQueryResponse::ResultType_MAX;
const int SubmitQueryResponse::ResultType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SubmitQueryResponse::kStateFieldNumber;
const int SubmitQueryResponse::kResultTypeFieldNumber;
const int SubmitQueryResponse::kQueryIdFieldNumber;
const int SubmitQueryResponse::kUserNameFieldNumber;
const int SubmitQueryResponse::kQueryMasterHostFieldNumber;
const int SubmitQueryResponse::kQueryMasterPortFieldNumber;
const int SubmitQueryResponse::kResultSetFieldNumber;
const int SubmitQueryResponse::kTableDescFieldNumber;
const int SubmitQueryResponse::kMaxRowNumFieldNumber;
const int SubmitQueryResponse::kSessionVarsFieldNumber;
#endif  // !_MSC_VER

SubmitQueryResponse::SubmitQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmitQueryResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  queryid_ = const_cast< ::QueryIdProto*>(&::QueryIdProto::default_instance());
  resultset_ = const_cast< ::tajo::client::SerializedResultSet*>(&::tajo::client::SerializedResultSet::default_instance());
  tabledesc_ = const_cast< ::TableDescProto*>(&::TableDescProto::default_instance());
  sessionvars_ = const_cast< ::KeyValueSetProto*>(&::KeyValueSetProto::default_instance());
}

SubmitQueryResponse::SubmitQueryResponse(const SubmitQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmitQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  result_type_ = 0;
  queryid_ = NULL;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querymasterhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querymasterport_ = 0;
  resultset_ = NULL;
  tabledesc_ = NULL;
  maxrownum_ = 0;
  sessionvars_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitQueryResponse::~SubmitQueryResponse() {
  SharedDtor();
}

void SubmitQueryResponse::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (querymasterhost_ != &::google::protobuf::internal::kEmptyString) {
    delete querymasterhost_;
  }
  if (this != default_instance_) {
    delete state_;
    delete queryid_;
    delete resultset_;
    delete tabledesc_;
    delete sessionvars_;
  }
}

void SubmitQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitQueryResponse_descriptor_;
}

const SubmitQueryResponse& SubmitQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

SubmitQueryResponse* SubmitQueryResponse::default_instance_ = NULL;

SubmitQueryResponse* SubmitQueryResponse::New() const {
  return new SubmitQueryResponse;
}

void SubmitQueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    result_type_ = 0;
    if (has_queryid()) {
      if (queryid_ != NULL) queryid_->::QueryIdProto::Clear();
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_querymasterhost()) {
      if (querymasterhost_ != &::google::protobuf::internal::kEmptyString) {
        querymasterhost_->clear();
      }
    }
    querymasterport_ = 0;
    if (has_resultset()) {
      if (resultset_ != NULL) resultset_->::tajo::client::SerializedResultSet::Clear();
    }
    if (has_tabledesc()) {
      if (tabledesc_ != NULL) tabledesc_->::TableDescProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxrownum_ = 0;
    if (has_sessionvars()) {
      if (sessionvars_ != NULL) sessionvars_->::KeyValueSetProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }

      // optional .tajo.client.SubmitQueryResponse.ResultType result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tajo::client::SubmitQueryResponse_ResultType_IsValid(value)) {
            set_result_type(static_cast< ::tajo::client::SubmitQueryResponse_ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_queryId;
        break;
      }

      // optional .QueryIdProto queryId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userName;
        break;
      }

      // optional string userName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_queryMasterHost;
        break;
      }

      // optional string queryMasterHost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryMasterHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_querymasterhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->querymasterhost().data(), this->querymasterhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_queryMasterPort;
        break;
      }

      // optional int32 queryMasterPort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryMasterPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &querymasterport_)));
          set_has_querymasterport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resultSet;
        break;
      }

      // optional .tajo.client.SerializedResultSet resultSet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resultset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tableDesc;
        break;
      }

      // optional .TableDescProto tableDesc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tabledesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxRowNum;
        break;
      }

      // optional int32 maxRowNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxRowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrownum_)));
          set_has_maxrownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_sessionVars;
        break;
      }

      // optional .KeyValueSetProto sessionVars = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionVars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionvars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmitQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .tajo.client.SubmitQueryResponse.ResultType result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_type(), output);
  }

  // optional .QueryIdProto queryId = 3;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->queryid(), output);
  }

  // optional string userName = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->username(), output);
  }

  // optional string queryMasterHost = 6;
  if (has_querymasterhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->querymasterhost().data(), this->querymasterhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->querymasterhost(), output);
  }

  // optional int32 queryMasterPort = 7;
  if (has_querymasterport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->querymasterport(), output);
  }

  // optional .tajo.client.SerializedResultSet resultSet = 8;
  if (has_resultset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->resultset(), output);
  }

  // optional .TableDescProto tableDesc = 9;
  if (has_tabledesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tabledesc(), output);
  }

  // optional int32 maxRowNum = 10;
  if (has_maxrownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxrownum(), output);
  }

  // optional .KeyValueSetProto sessionVars = 11;
  if (has_sessionvars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->sessionvars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmitQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .tajo.client.SubmitQueryResponse.ResultType result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result_type(), target);
  }

  // optional .QueryIdProto queryId = 3;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->queryid(), target);
  }

  // optional string userName = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // optional string queryMasterHost = 6;
  if (has_querymasterhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->querymasterhost().data(), this->querymasterhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->querymasterhost(), target);
  }

  // optional int32 queryMasterPort = 7;
  if (has_querymasterport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->querymasterport(), target);
  }

  // optional .tajo.client.SerializedResultSet resultSet = 8;
  if (has_resultset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->resultset(), target);
  }

  // optional .TableDescProto tableDesc = 9;
  if (has_tabledesc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tabledesc(), target);
  }

  // optional int32 maxRowNum = 10;
  if (has_maxrownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxrownum(), target);
  }

  // optional .KeyValueSetProto sessionVars = 11;
  if (has_sessionvars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->sessionvars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmitQueryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .tajo.client.SubmitQueryResponse.ResultType result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

    // optional .QueryIdProto queryId = 3;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryid());
    }

    // optional string userName = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string queryMasterHost = 6;
    if (has_querymasterhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->querymasterhost());
    }

    // optional int32 queryMasterPort = 7;
    if (has_querymasterport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->querymasterport());
    }

    // optional .tajo.client.SerializedResultSet resultSet = 8;
    if (has_resultset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resultset());
    }

    // optional .TableDescProto tableDesc = 9;
    if (has_tabledesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tabledesc());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 maxRowNum = 10;
    if (has_maxrownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrownum());
    }

    // optional .KeyValueSetProto sessionVars = 11;
    if (has_sessionvars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionvars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitQueryResponse::MergeFrom(const SubmitQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_queryid()) {
      mutable_queryid()->::QueryIdProto::MergeFrom(from.queryid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_querymasterhost()) {
      set_querymasterhost(from.querymasterhost());
    }
    if (from.has_querymasterport()) {
      set_querymasterport(from.querymasterport());
    }
    if (from.has_resultset()) {
      mutable_resultset()->::tajo::client::SerializedResultSet::MergeFrom(from.resultset());
    }
    if (from.has_tabledesc()) {
      mutable_tabledesc()->::TableDescProto::MergeFrom(from.tabledesc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxrownum()) {
      set_maxrownum(from.maxrownum());
    }
    if (from.has_sessionvars()) {
      mutable_sessionvars()->::KeyValueSetProto::MergeFrom(from.sessionvars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitQueryResponse::CopyFrom(const SubmitQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitQueryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_queryid()) {
    if (!this->queryid().IsInitialized()) return false;
  }
  if (has_resultset()) {
    if (!this->resultset().IsInitialized()) return false;
  }
  if (has_tabledesc()) {
    if (!this->tabledesc().IsInitialized()) return false;
  }
  if (has_sessionvars()) {
    if (!this->sessionvars().IsInitialized()) return false;
  }
  return true;
}

void SubmitQueryResponse::Swap(SubmitQueryResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(result_type_, other->result_type_);
    std::swap(queryid_, other->queryid_);
    std::swap(username_, other->username_);
    std::swap(querymasterhost_, other->querymasterhost_);
    std::swap(querymasterport_, other->querymasterport_);
    std::swap(resultset_, other->resultset_);
    std::swap(tabledesc_, other->tabledesc_);
    std::swap(maxrownum_, other->maxrownum_);
    std::swap(sessionvars_, other->sessionvars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitQueryResponse_descriptor_;
  metadata.reflection = SubmitQueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryStatusResponse::kStateFieldNumber;
const int GetQueryStatusResponse::kQueryIdFieldNumber;
const int GetQueryStatusResponse::kQueryStateFieldNumber;
const int GetQueryStatusResponse::kProgressFieldNumber;
const int GetQueryStatusResponse::kSubmitTimeFieldNumber;
const int GetQueryStatusResponse::kFinishTimeFieldNumber;
const int GetQueryStatusResponse::kHasResultFieldNumber;
const int GetQueryStatusResponse::kErrorMessageFieldNumber;
const int GetQueryStatusResponse::kErrorTraceFieldNumber;
const int GetQueryStatusResponse::kQueryMasterHostFieldNumber;
const int GetQueryStatusResponse::kQueryMasterPortFieldNumber;
#endif  // !_MSC_VER

GetQueryStatusResponse::GetQueryStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryStatusResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  queryid_ = const_cast< ::QueryIdProto*>(&::QueryIdProto::default_instance());
}

GetQueryStatusResponse::GetQueryStatusResponse(const GetQueryStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  queryid_ = NULL;
  query_state_ = 0;
  progress_ = 0;
  submittime_ = GOOGLE_LONGLONG(0);
  finishtime_ = GOOGLE_LONGLONG(0);
  hasresult_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errortrace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querymasterhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querymasterport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryStatusResponse::~GetQueryStatusResponse() {
  SharedDtor();
}

void GetQueryStatusResponse::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (errortrace_ != &::google::protobuf::internal::kEmptyString) {
    delete errortrace_;
  }
  if (querymasterhost_ != &::google::protobuf::internal::kEmptyString) {
    delete querymasterhost_;
  }
  if (this != default_instance_) {
    delete state_;
    delete queryid_;
  }
}

void GetQueryStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryStatusResponse_descriptor_;
}

const GetQueryStatusResponse& GetQueryStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryStatusResponse* GetQueryStatusResponse::default_instance_ = NULL;

GetQueryStatusResponse* GetQueryStatusResponse::New() const {
  return new GetQueryStatusResponse;
}

void GetQueryStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_queryid()) {
      if (queryid_ != NULL) queryid_->::QueryIdProto::Clear();
    }
    query_state_ = 0;
    progress_ = 0;
    submittime_ = GOOGLE_LONGLONG(0);
    finishtime_ = GOOGLE_LONGLONG(0);
    hasresult_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_errortrace()) {
      if (errortrace_ != &::google::protobuf::internal::kEmptyString) {
        errortrace_->clear();
      }
    }
    if (has_querymasterhost()) {
      if (querymasterhost_ != &::google::protobuf::internal::kEmptyString) {
        querymasterhost_->clear();
      }
    }
    querymasterport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryId;
        break;
      }

      // optional .QueryIdProto queryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_query_state;
        break;
      }

      // optional .QueryState query_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QueryState_IsValid(value)) {
            set_query_state(static_cast< ::QueryState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_progress;
        break;
      }

      // optional float progress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_submitTime;
        break;
      }

      // optional int64 submitTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_submitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &submittime_)));
          set_has_submittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_finishTime;
        break;
      }

      // optional int64 finishTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hasResult;
        break;
      }

      // optional bool hasResult = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasresult_)));
          set_has_hasresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_errorMessage;
        break;
      }

      // optional string errorMessage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_errorTrace;
        break;
      }

      // optional string errorTrace = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorTrace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errortrace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errortrace().data(), this->errortrace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_queryMasterHost;
        break;
      }

      // optional string queryMasterHost = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryMasterHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_querymasterhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->querymasterhost().data(), this->querymasterhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_queryMasterPort;
        break;
      }

      // optional int32 queryMasterPort = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryMasterPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &querymasterport_)));
          set_has_querymasterport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .QueryIdProto queryId = 2;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queryid(), output);
  }

  // optional .QueryState query_state = 3;
  if (has_query_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->query_state(), output);
  }

  // optional float progress = 4;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->progress(), output);
  }

  // optional int64 submitTime = 5;
  if (has_submittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->submittime(), output);
  }

  // optional int64 finishTime = 7;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->finishtime(), output);
  }

  // optional bool hasResult = 8;
  if (has_hasresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hasresult(), output);
  }

  // optional string errorMessage = 9;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->errormessage(), output);
  }

  // optional string errorTrace = 10;
  if (has_errortrace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errortrace().data(), this->errortrace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->errortrace(), output);
  }

  // optional string queryMasterHost = 11;
  if (has_querymasterhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->querymasterhost().data(), this->querymasterhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->querymasterhost(), output);
  }

  // optional int32 queryMasterPort = 12;
  if (has_querymasterport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->querymasterport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .QueryIdProto queryId = 2;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queryid(), target);
  }

  // optional .QueryState query_state = 3;
  if (has_query_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->query_state(), target);
  }

  // optional float progress = 4;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->progress(), target);
  }

  // optional int64 submitTime = 5;
  if (has_submittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->submittime(), target);
  }

  // optional int64 finishTime = 7;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->finishtime(), target);
  }

  // optional bool hasResult = 8;
  if (has_hasresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hasresult(), target);
  }

  // optional string errorMessage = 9;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->errormessage(), target);
  }

  // optional string errorTrace = 10;
  if (has_errortrace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errortrace().data(), this->errortrace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->errortrace(), target);
  }

  // optional string queryMasterHost = 11;
  if (has_querymasterhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->querymasterhost().data(), this->querymasterhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->querymasterhost(), target);
  }

  // optional int32 queryMasterPort = 12;
  if (has_querymasterport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->querymasterport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .QueryIdProto queryId = 2;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryid());
    }

    // optional .QueryState query_state = 3;
    if (has_query_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_state());
    }

    // optional float progress = 4;
    if (has_progress()) {
      total_size += 1 + 4;
    }

    // optional int64 submitTime = 5;
    if (has_submittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->submittime());
    }

    // optional int64 finishTime = 7;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime());
    }

    // optional bool hasResult = 8;
    if (has_hasresult()) {
      total_size += 1 + 1;
    }

    // optional string errorMessage = 9;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string errorTrace = 10;
    if (has_errortrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errortrace());
    }

    // optional string queryMasterHost = 11;
    if (has_querymasterhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->querymasterhost());
    }

    // optional int32 queryMasterPort = 12;
    if (has_querymasterport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->querymasterport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryStatusResponse::MergeFrom(const GetQueryStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_queryid()) {
      mutable_queryid()->::QueryIdProto::MergeFrom(from.queryid());
    }
    if (from.has_query_state()) {
      set_query_state(from.query_state());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_submittime()) {
      set_submittime(from.submittime());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_hasresult()) {
      set_hasresult(from.hasresult());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errortrace()) {
      set_errortrace(from.errortrace());
    }
    if (from.has_querymasterhost()) {
      set_querymasterhost(from.querymasterhost());
    }
    if (from.has_querymasterport()) {
      set_querymasterport(from.querymasterport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryStatusResponse::CopyFrom(const GetQueryStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_queryid()) {
    if (!this->queryid().IsInitialized()) return false;
  }
  return true;
}

void GetQueryStatusResponse::Swap(GetQueryStatusResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(queryid_, other->queryid_);
    std::swap(query_state_, other->query_state_);
    std::swap(progress_, other->progress_);
    std::swap(submittime_, other->submittime_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(hasresult_, other->hasresult_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(errortrace_, other->errortrace_);
    std::swap(querymasterhost_, other->querymasterhost_);
    std::swap(querymasterport_, other->querymasterport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryStatusResponse_descriptor_;
  metadata.reflection = GetQueryStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryResultDataRequest::kSessionIdFieldNumber;
const int GetQueryResultDataRequest::kQueryIdFieldNumber;
const int GetQueryResultDataRequest::kFetchRowNumFieldNumber;
const int GetQueryResultDataRequest::kCompressCodecFieldNumber;
#endif  // !_MSC_VER

GetQueryResultDataRequest::GetQueryResultDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryResultDataRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
  queryid_ = const_cast< ::QueryIdProto*>(&::QueryIdProto::default_instance());
}

GetQueryResultDataRequest::GetQueryResultDataRequest(const GetQueryResultDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryResultDataRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  queryid_ = NULL;
  fetchrownum_ = 0;
  compresscodec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryResultDataRequest::~GetQueryResultDataRequest() {
  SharedDtor();
}

void GetQueryResultDataRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sessionid_;
    delete queryid_;
  }
}

void GetQueryResultDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryResultDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryResultDataRequest_descriptor_;
}

const GetQueryResultDataRequest& GetQueryResultDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryResultDataRequest* GetQueryResultDataRequest::default_instance_ = NULL;

GetQueryResultDataRequest* GetQueryResultDataRequest::New() const {
  return new GetQueryResultDataRequest;
}

void GetQueryResultDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_queryid()) {
      if (queryid_ != NULL) queryid_->::QueryIdProto::Clear();
    }
    fetchrownum_ = 0;
    compresscodec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryResultDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryId;
        break;
      }

      // required .QueryIdProto queryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetchRowNum;
        break;
      }

      // required int32 fetchRowNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetchRowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetchrownum_)));
          set_has_fetchrownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_compressCodec;
        break;
      }

      // optional .CodecType compressCodec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compressCodec:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CodecType_IsValid(value)) {
            set_compresscodec(static_cast< ::CodecType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryResultDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // required .QueryIdProto queryId = 2;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queryid(), output);
  }

  // required int32 fetchRowNum = 3;
  if (has_fetchrownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetchrownum(), output);
  }

  // optional .CodecType compressCodec = 4;
  if (has_compresscodec()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->compresscodec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryResultDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // required .QueryIdProto queryId = 2;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queryid(), target);
  }

  // required int32 fetchRowNum = 3;
  if (has_fetchrownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetchrownum(), target);
  }

  // optional .CodecType compressCodec = 4;
  if (has_compresscodec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->compresscodec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryResultDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // required .QueryIdProto queryId = 2;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryid());
    }

    // required int32 fetchRowNum = 3;
    if (has_fetchrownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetchrownum());
    }

    // optional .CodecType compressCodec = 4;
    if (has_compresscodec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compresscodec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryResultDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryResultDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryResultDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryResultDataRequest::MergeFrom(const GetQueryResultDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_queryid()) {
      mutable_queryid()->::QueryIdProto::MergeFrom(from.queryid());
    }
    if (from.has_fetchrownum()) {
      set_fetchrownum(from.fetchrownum());
    }
    if (from.has_compresscodec()) {
      set_compresscodec(from.compresscodec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryResultDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryResultDataRequest::CopyFrom(const GetQueryResultDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryResultDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  if (has_queryid()) {
    if (!this->queryid().IsInitialized()) return false;
  }
  return true;
}

void GetQueryResultDataRequest::Swap(GetQueryResultDataRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(queryid_, other->queryid_);
    std::swap(fetchrownum_, other->fetchrownum_);
    std::swap(compresscodec_, other->compresscodec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryResultDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryResultDataRequest_descriptor_;
  metadata.reflection = GetQueryResultDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryResultDataResponse::kStateFieldNumber;
const int GetQueryResultDataResponse::kResultSetFieldNumber;
#endif  // !_MSC_VER

GetQueryResultDataResponse::GetQueryResultDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryResultDataResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  resultset_ = const_cast< ::tajo::client::SerializedResultSet*>(&::tajo::client::SerializedResultSet::default_instance());
}

GetQueryResultDataResponse::GetQueryResultDataResponse(const GetQueryResultDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryResultDataResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  resultset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryResultDataResponse::~GetQueryResultDataResponse() {
  SharedDtor();
}

void GetQueryResultDataResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete resultset_;
  }
}

void GetQueryResultDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryResultDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryResultDataResponse_descriptor_;
}

const GetQueryResultDataResponse& GetQueryResultDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryResultDataResponse* GetQueryResultDataResponse::default_instance_ = NULL;

GetQueryResultDataResponse* GetQueryResultDataResponse::New() const {
  return new GetQueryResultDataResponse;
}

void GetQueryResultDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_resultset()) {
      if (resultset_ != NULL) resultset_->::tajo::client::SerializedResultSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryResultDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resultSet;
        break;
      }

      // optional .tajo.client.SerializedResultSet resultSet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resultset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryResultDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .tajo.client.SerializedResultSet resultSet = 2;
  if (has_resultset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resultset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryResultDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .tajo.client.SerializedResultSet resultSet = 2;
  if (has_resultset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resultset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryResultDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .tajo.client.SerializedResultSet resultSet = 2;
    if (has_resultset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resultset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryResultDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryResultDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryResultDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryResultDataResponse::MergeFrom(const GetQueryResultDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_resultset()) {
      mutable_resultset()->::tajo::client::SerializedResultSet::MergeFrom(from.resultset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryResultDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryResultDataResponse::CopyFrom(const GetQueryResultDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryResultDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_resultset()) {
    if (!this->resultset().IsInitialized()) return false;
  }
  return true;
}

void GetQueryResultDataResponse::Swap(GetQueryResultDataResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(resultset_, other->resultset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryResultDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryResultDataResponse_descriptor_;
  metadata.reflection = GetQueryResultDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetClusterInfoRequest::kSessionIdFieldNumber;
#endif  // !_MSC_VER

GetClusterInfoRequest::GetClusterInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetClusterInfoRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
}

GetClusterInfoRequest::GetClusterInfoRequest(const GetClusterInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetClusterInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterInfoRequest::~GetClusterInfoRequest() {
  SharedDtor();
}

void GetClusterInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete sessionid_;
  }
}

void GetClusterInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterInfoRequest_descriptor_;
}

const GetClusterInfoRequest& GetClusterInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetClusterInfoRequest* GetClusterInfoRequest::default_instance_ = NULL;

GetClusterInfoRequest* GetClusterInfoRequest::New() const {
  return new GetClusterInfoRequest;
}

void GetClusterInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetClusterInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetClusterInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetClusterInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterInfoRequest::MergeFrom(const GetClusterInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterInfoRequest::CopyFrom(const GetClusterInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterInfoRequest::IsInitialized() const {

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  return true;
}

void GetClusterInfoRequest::Swap(GetClusterInfoRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterInfoRequest_descriptor_;
  metadata.reflection = GetClusterInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkerResourceInfo::kConnectionInfoFieldNumber;
const int WorkerResourceInfo::kTotalResourceFieldNumber;
const int WorkerResourceInfo::kAvailableResourceFieldNumber;
const int WorkerResourceInfo::kNumRunningTasksFieldNumber;
const int WorkerResourceInfo::kWorkerStatusFieldNumber;
const int WorkerResourceInfo::kLastHeartbeatFieldNumber;
const int WorkerResourceInfo::kNumQueryMasterTasksFieldNumber;
#endif  // !_MSC_VER

WorkerResourceInfo::WorkerResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerResourceInfo::InitAsDefaultInstance() {
  connectioninfo_ = const_cast< ::WorkerConnectionInfoProto*>(&::WorkerConnectionInfoProto::default_instance());
  totalresource_ = const_cast< ::NodeResourceProto*>(&::NodeResourceProto::default_instance());
  availableresource_ = const_cast< ::NodeResourceProto*>(&::NodeResourceProto::default_instance());
}

WorkerResourceInfo::WorkerResourceInfo(const WorkerResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  connectioninfo_ = NULL;
  totalresource_ = NULL;
  availableresource_ = NULL;
  numrunningtasks_ = 0;
  workerstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastheartbeat_ = GOOGLE_LONGLONG(0);
  numquerymastertasks_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerResourceInfo::~WorkerResourceInfo() {
  SharedDtor();
}

void WorkerResourceInfo::SharedDtor() {
  if (workerstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete workerstatus_;
  }
  if (this != default_instance_) {
    delete connectioninfo_;
    delete totalresource_;
    delete availableresource_;
  }
}

void WorkerResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerResourceInfo_descriptor_;
}

const WorkerResourceInfo& WorkerResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

WorkerResourceInfo* WorkerResourceInfo::default_instance_ = NULL;

WorkerResourceInfo* WorkerResourceInfo::New() const {
  return new WorkerResourceInfo;
}

void WorkerResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_connectioninfo()) {
      if (connectioninfo_ != NULL) connectioninfo_->::WorkerConnectionInfoProto::Clear();
    }
    if (has_totalresource()) {
      if (totalresource_ != NULL) totalresource_->::NodeResourceProto::Clear();
    }
    if (has_availableresource()) {
      if (availableresource_ != NULL) availableresource_->::NodeResourceProto::Clear();
    }
    numrunningtasks_ = 0;
    if (has_workerstatus()) {
      if (workerstatus_ != &::google::protobuf::internal::kEmptyString) {
        workerstatus_->clear();
      }
    }
    lastheartbeat_ = GOOGLE_LONGLONG(0);
    numquerymastertasks_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .WorkerConnectionInfoProto connectionInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_totalResource;
        break;
      }

      // required .NodeResourceProto totalResource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totalResource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totalresource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_availableResource;
        break;
      }

      // required .NodeResourceProto availableResource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_availableResource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_availableresource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_numRunningTasks;
        break;
      }

      // required int32 numRunningTasks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numRunningTasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numrunningtasks_)));
          set_has_numrunningtasks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_workerStatus;
        break;
      }

      // required string workerStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workerStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workerstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->workerstatus().data(), this->workerstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastHeartbeat;
        break;
      }

      // required int64 lastHeartbeat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastHeartbeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastheartbeat_)));
          set_has_lastheartbeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_numQueryMasterTasks;
        break;
      }

      // required int32 numQueryMasterTasks = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numQueryMasterTasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numquerymastertasks_)));
          set_has_numquerymastertasks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .WorkerConnectionInfoProto connectionInfo = 1;
  if (has_connectioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connectioninfo(), output);
  }

  // required .NodeResourceProto totalResource = 2;
  if (has_totalresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->totalresource(), output);
  }

  // required .NodeResourceProto availableResource = 3;
  if (has_availableresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->availableresource(), output);
  }

  // required int32 numRunningTasks = 4;
  if (has_numrunningtasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->numrunningtasks(), output);
  }

  // required string workerStatus = 5;
  if (has_workerstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workerstatus().data(), this->workerstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->workerstatus(), output);
  }

  // required int64 lastHeartbeat = 6;
  if (has_lastheartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lastheartbeat(), output);
  }

  // required int32 numQueryMasterTasks = 7;
  if (has_numquerymastertasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->numquerymastertasks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .WorkerConnectionInfoProto connectionInfo = 1;
  if (has_connectioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connectioninfo(), target);
  }

  // required .NodeResourceProto totalResource = 2;
  if (has_totalresource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->totalresource(), target);
  }

  // required .NodeResourceProto availableResource = 3;
  if (has_availableresource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->availableresource(), target);
  }

  // required int32 numRunningTasks = 4;
  if (has_numrunningtasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->numrunningtasks(), target);
  }

  // required string workerStatus = 5;
  if (has_workerstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workerstatus().data(), this->workerstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->workerstatus(), target);
  }

  // required int64 lastHeartbeat = 6;
  if (has_lastheartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lastheartbeat(), target);
  }

  // required int32 numQueryMasterTasks = 7;
  if (has_numquerymastertasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->numquerymastertasks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .WorkerConnectionInfoProto connectionInfo = 1;
    if (has_connectioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectioninfo());
    }

    // required .NodeResourceProto totalResource = 2;
    if (has_totalresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totalresource());
    }

    // required .NodeResourceProto availableResource = 3;
    if (has_availableresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->availableresource());
    }

    // required int32 numRunningTasks = 4;
    if (has_numrunningtasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numrunningtasks());
    }

    // required string workerStatus = 5;
    if (has_workerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workerstatus());
    }

    // required int64 lastHeartbeat = 6;
    if (has_lastheartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastheartbeat());
    }

    // required int32 numQueryMasterTasks = 7;
    if (has_numquerymastertasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numquerymastertasks());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerResourceInfo::MergeFrom(const WorkerResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectioninfo()) {
      mutable_connectioninfo()->::WorkerConnectionInfoProto::MergeFrom(from.connectioninfo());
    }
    if (from.has_totalresource()) {
      mutable_totalresource()->::NodeResourceProto::MergeFrom(from.totalresource());
    }
    if (from.has_availableresource()) {
      mutable_availableresource()->::NodeResourceProto::MergeFrom(from.availableresource());
    }
    if (from.has_numrunningtasks()) {
      set_numrunningtasks(from.numrunningtasks());
    }
    if (from.has_workerstatus()) {
      set_workerstatus(from.workerstatus());
    }
    if (from.has_lastheartbeat()) {
      set_lastheartbeat(from.lastheartbeat());
    }
    if (from.has_numquerymastertasks()) {
      set_numquerymastertasks(from.numquerymastertasks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerResourceInfo::CopyFrom(const WorkerResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_connectioninfo()) {
    if (!this->connectioninfo().IsInitialized()) return false;
  }
  return true;
}

void WorkerResourceInfo::Swap(WorkerResourceInfo* other) {
  if (other != this) {
    std::swap(connectioninfo_, other->connectioninfo_);
    std::swap(totalresource_, other->totalresource_);
    std::swap(availableresource_, other->availableresource_);
    std::swap(numrunningtasks_, other->numrunningtasks_);
    std::swap(workerstatus_, other->workerstatus_);
    std::swap(lastheartbeat_, other->lastheartbeat_);
    std::swap(numquerymastertasks_, other->numquerymastertasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerResourceInfo_descriptor_;
  metadata.reflection = WorkerResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetClusterInfoResponse::kStateFieldNumber;
const int GetClusterInfoResponse::kWorkerListFieldNumber;
#endif  // !_MSC_VER

GetClusterInfoResponse::GetClusterInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetClusterInfoResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
}

GetClusterInfoResponse::GetClusterInfoResponse(const GetClusterInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetClusterInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterInfoResponse::~GetClusterInfoResponse() {
  SharedDtor();
}

void GetClusterInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void GetClusterInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterInfoResponse_descriptor_;
}

const GetClusterInfoResponse& GetClusterInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetClusterInfoResponse* GetClusterInfoResponse::default_instance_ = NULL;

GetClusterInfoResponse* GetClusterInfoResponse::New() const {
  return new GetClusterInfoResponse;
}

void GetClusterInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
  }
  workerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_workerList;
        break;
      }

      // repeated .tajo.client.WorkerResourceInfo workerList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_workerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetClusterInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // repeated .tajo.client.WorkerResourceInfo workerList = 2;
  for (int i = 0; i < this->workerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->workerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetClusterInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // repeated .tajo.client.WorkerResourceInfo workerList = 2;
  for (int i = 0; i < this->workerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->workerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetClusterInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  // repeated .tajo.client.WorkerResourceInfo workerList = 2;
  total_size += 1 * this->workerlist_size();
  for (int i = 0; i < this->workerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->workerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterInfoResponse::MergeFrom(const GetClusterInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  workerlist_.MergeFrom(from.workerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterInfoResponse::CopyFrom(const GetClusterInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  for (int i = 0; i < workerlist_size(); i++) {
    if (!this->workerlist(i).IsInitialized()) return false;
  }
  return true;
}

void GetClusterInfoResponse::Swap(GetClusterInfoResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    workerlist_.Swap(&other->workerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterInfoResponse_descriptor_;
  metadata.reflection = GetClusterInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTableRequest::kSessionIdFieldNumber;
const int CreateTableRequest::kNameFieldNumber;
const int CreateTableRequest::kSchemaFieldNumber;
const int CreateTableRequest::kMetaFieldNumber;
const int CreateTableRequest::kPathFieldNumber;
const int CreateTableRequest::kPartitionFieldNumber;
#endif  // !_MSC_VER

CreateTableRequest::CreateTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTableRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
  schema_ = const_cast< ::SchemaProto*>(&::SchemaProto::default_instance());
  meta_ = const_cast< ::TableProto*>(&::TableProto::default_instance());
  partition_ = const_cast< ::PartitionMethodProto*>(&::PartitionMethodProto::default_instance());
}

CreateTableRequest::CreateTableRequest(const CreateTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTableRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  schema_ = NULL;
  meta_ = NULL;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTableRequest::~CreateTableRequest() {
  SharedDtor();
}

void CreateTableRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
    delete sessionid_;
    delete schema_;
    delete meta_;
    delete partition_;
  }
}

void CreateTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTableRequest_descriptor_;
}

const CreateTableRequest& CreateTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

CreateTableRequest* CreateTableRequest::default_instance_ = NULL;

CreateTableRequest* CreateTableRequest::New() const {
  return new CreateTableRequest;
}

void CreateTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_schema()) {
      if (schema_ != NULL) schema_->::SchemaProto::Clear();
    }
    if (has_meta()) {
      if (meta_ != NULL) meta_->::TableProto::Clear();
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_partition()) {
      if (partition_ != NULL) partition_->::PartitionMethodProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_schema;
        break;
      }

      // optional .SchemaProto schema = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_meta;
        break;
      }

      // required .TableProto meta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }

      // required string path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_partition;
        break;
      }

      // optional .PartitionMethodProto partition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .SchemaProto schema = 3;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->schema(), output);
  }

  // required .TableProto meta = 4;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->meta(), output);
  }

  // required string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->path(), output);
  }

  // optional .PartitionMethodProto partition = 6;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->partition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .SchemaProto schema = 3;
  if (has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->schema(), target);
  }

  // required .TableProto meta = 4;
  if (has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->meta(), target);
  }

  // required string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  // optional .PartitionMethodProto partition = 6;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->partition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .SchemaProto schema = 3;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema());
    }

    // required .TableProto meta = 4;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta());
    }

    // required string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional .PartitionMethodProto partition = 6;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTableRequest::MergeFrom(const CreateTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_schema()) {
      mutable_schema()->::SchemaProto::MergeFrom(from.schema());
    }
    if (from.has_meta()) {
      mutable_meta()->::TableProto::MergeFrom(from.meta());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_partition()) {
      mutable_partition()->::PartitionMethodProto::MergeFrom(from.partition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableRequest::CopyFrom(const CreateTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  if (has_schema()) {
    if (!this->schema().IsInitialized()) return false;
  }
  if (has_meta()) {
    if (!this->meta().IsInitialized()) return false;
  }
  if (has_partition()) {
    if (!this->partition().IsInitialized()) return false;
  }
  return true;
}

void CreateTableRequest::Swap(CreateTableRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(name_, other->name_);
    std::swap(schema_, other->schema_);
    std::swap(meta_, other->meta_);
    std::swap(path_, other->path_);
    std::swap(partition_, other->partition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTableRequest_descriptor_;
  metadata.reflection = CreateTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropTableRequest::kSessionIdFieldNumber;
const int DropTableRequest::kNameFieldNumber;
const int DropTableRequest::kPurgeFieldNumber;
#endif  // !_MSC_VER

DropTableRequest::DropTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropTableRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
}

DropTableRequest::DropTableRequest(const DropTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropTableRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  purge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropTableRequest::~DropTableRequest() {
  SharedDtor();
}

void DropTableRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete sessionid_;
  }
}

void DropTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropTableRequest_descriptor_;
}

const DropTableRequest& DropTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

DropTableRequest* DropTableRequest::default_instance_ = NULL;

DropTableRequest* DropTableRequest::New() const {
  return new DropTableRequest;
}

void DropTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    purge_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_purge;
        break;
      }

      // optional bool purge = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purge_)));
          set_has_purge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional bool purge = 3 [default = false];
  if (has_purge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->purge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool purge = 3 [default = false];
  if (has_purge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->purge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool purge = 3 [default = false];
    if (has_purge()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropTableRequest::MergeFrom(const DropTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_purge()) {
      set_purge(from.purge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropTableRequest::CopyFrom(const DropTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  return true;
}

void DropTableRequest::Swap(DropTableRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(name_, other->name_);
    std::swap(purge_, other->purge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropTableRequest_descriptor_;
  metadata.reflection = DropTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryInfoProto::kQueryIdFieldNumber;
const int QueryInfoProto::kSqlFieldNumber;
const int QueryInfoProto::kContextVarsFieldNumber;
const int QueryInfoProto::kQueryStateFieldNumber;
const int QueryInfoProto::kProgressFieldNumber;
const int QueryInfoProto::kStartTimeFieldNumber;
const int QueryInfoProto::kFinishTimeFieldNumber;
const int QueryInfoProto::kLastMessageFieldNumber;
const int QueryInfoProto::kHostNameOfQMFieldNumber;
const int QueryInfoProto::kQueryMasterPortFieldNumber;
const int QueryInfoProto::kQueryMasterClientPortFieldNumber;
const int QueryInfoProto::kQueryMasterInfoPortFieldNumber;
const int QueryInfoProto::kResultDescFieldNumber;
#endif  // !_MSC_VER

QueryInfoProto::QueryInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryInfoProto::InitAsDefaultInstance() {
  contextvars_ = const_cast< ::KeyValueSetProto*>(&::KeyValueSetProto::default_instance());
  resultdesc_ = const_cast< ::TableDescProto*>(&::TableDescProto::default_instance());
}

QueryInfoProto::QueryInfoProto(const QueryInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryInfoProto::SharedCtor() {
  _cached_size_ = 0;
  queryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contextvars_ = NULL;
  querystate_ = 0;
  progress_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  finishtime_ = GOOGLE_LONGLONG(0);
  lastmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostnameofqm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querymasterport_ = 0;
  querymasterclientport_ = 0;
  querymasterinfoport_ = 0;
  resultdesc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryInfoProto::~QueryInfoProto() {
  SharedDtor();
}

void QueryInfoProto::SharedDtor() {
  if (queryid_ != &::google::protobuf::internal::kEmptyString) {
    delete queryid_;
  }
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (lastmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete lastmessage_;
  }
  if (hostnameofqm_ != &::google::protobuf::internal::kEmptyString) {
    delete hostnameofqm_;
  }
  if (this != default_instance_) {
    delete contextvars_;
    delete resultdesc_;
  }
}

void QueryInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryInfoProto_descriptor_;
}

const QueryInfoProto& QueryInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

QueryInfoProto* QueryInfoProto::default_instance_ = NULL;

QueryInfoProto* QueryInfoProto::New() const {
  return new QueryInfoProto;
}

void QueryInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queryid()) {
      if (queryid_ != &::google::protobuf::internal::kEmptyString) {
        queryid_->clear();
      }
    }
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::kEmptyString) {
        sql_->clear();
      }
    }
    if (has_contextvars()) {
      if (contextvars_ != NULL) contextvars_->::KeyValueSetProto::Clear();
    }
    querystate_ = 0;
    progress_ = 0;
    starttime_ = GOOGLE_LONGLONG(0);
    finishtime_ = GOOGLE_LONGLONG(0);
    if (has_lastmessage()) {
      if (lastmessage_ != &::google::protobuf::internal::kEmptyString) {
        lastmessage_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_hostnameofqm()) {
      if (hostnameofqm_ != &::google::protobuf::internal::kEmptyString) {
        hostnameofqm_->clear();
      }
    }
    querymasterport_ = 0;
    querymasterclientport_ = 0;
    querymasterinfoport_ = 0;
    if (has_resultdesc()) {
      if (resultdesc_ != NULL) resultdesc_->::TableDescProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queryId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queryid().data(), this->queryid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sql;
        break;
      }

      // optional string sql = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contextVars;
        break;
      }

      // optional .KeyValueSetProto contextVars = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contextVars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contextvars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_queryState;
        break;
      }

      // optional .QueryState queryState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QueryState_IsValid(value)) {
            set_querystate(static_cast< ::QueryState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_progress;
        break;
      }

      // optional float progress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_finishTime;
        break;
      }

      // optional int64 finishTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lastMessage;
        break;
      }

      // optional string lastMessage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastmessage().data(), this->lastmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_hostNameOfQM;
        break;
      }

      // optional string hostNameOfQM = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostNameOfQM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostnameofqm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostnameofqm().data(), this->hostnameofqm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_queryMasterPort;
        break;
      }

      // optional int32 queryMasterPort = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryMasterPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &querymasterport_)));
          set_has_querymasterport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_queryMasterClientPort;
        break;
      }

      // optional int32 queryMasterClientPort = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryMasterClientPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &querymasterclientport_)));
          set_has_querymasterclientport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_queryMasterInfoPort;
        break;
      }

      // optional int32 queryMasterInfoPort = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryMasterInfoPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &querymasterinfoport_)));
          set_has_querymasterinfoport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_resultDesc;
        break;
      }

      // optional .TableDescProto resultDesc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resultdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string queryId = 1;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queryid().data(), this->queryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queryid(), output);
  }

  // optional string sql = 2;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sql(), output);
  }

  // optional .KeyValueSetProto contextVars = 3;
  if (has_contextvars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contextvars(), output);
  }

  // optional .QueryState queryState = 4;
  if (has_querystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->querystate(), output);
  }

  // optional float progress = 5;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->progress(), output);
  }

  // optional int64 startTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->starttime(), output);
  }

  // optional int64 finishTime = 7;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->finishtime(), output);
  }

  // optional string lastMessage = 8;
  if (has_lastmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastmessage().data(), this->lastmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lastmessage(), output);
  }

  // optional string hostNameOfQM = 9;
  if (has_hostnameofqm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostnameofqm().data(), this->hostnameofqm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->hostnameofqm(), output);
  }

  // optional int32 queryMasterPort = 10;
  if (has_querymasterport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->querymasterport(), output);
  }

  // optional int32 queryMasterClientPort = 11;
  if (has_querymasterclientport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->querymasterclientport(), output);
  }

  // optional int32 queryMasterInfoPort = 12;
  if (has_querymasterinfoport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->querymasterinfoport(), output);
  }

  // optional .TableDescProto resultDesc = 13;
  if (has_resultdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->resultdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string queryId = 1;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queryid().data(), this->queryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queryid(), target);
  }

  // optional string sql = 2;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql(), target);
  }

  // optional .KeyValueSetProto contextVars = 3;
  if (has_contextvars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->contextvars(), target);
  }

  // optional .QueryState queryState = 4;
  if (has_querystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->querystate(), target);
  }

  // optional float progress = 5;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->progress(), target);
  }

  // optional int64 startTime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->starttime(), target);
  }

  // optional int64 finishTime = 7;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->finishtime(), target);
  }

  // optional string lastMessage = 8;
  if (has_lastmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastmessage().data(), this->lastmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lastmessage(), target);
  }

  // optional string hostNameOfQM = 9;
  if (has_hostnameofqm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostnameofqm().data(), this->hostnameofqm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->hostnameofqm(), target);
  }

  // optional int32 queryMasterPort = 10;
  if (has_querymasterport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->querymasterport(), target);
  }

  // optional int32 queryMasterClientPort = 11;
  if (has_querymasterclientport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->querymasterclientport(), target);
  }

  // optional int32 queryMasterInfoPort = 12;
  if (has_querymasterinfoport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->querymasterinfoport(), target);
  }

  // optional .TableDescProto resultDesc = 13;
  if (has_resultdesc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->resultdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queryId = 1;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queryid());
    }

    // optional string sql = 2;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

    // optional .KeyValueSetProto contextVars = 3;
    if (has_contextvars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contextvars());
    }

    // optional .QueryState queryState = 4;
    if (has_querystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->querystate());
    }

    // optional float progress = 5;
    if (has_progress()) {
      total_size += 1 + 4;
    }

    // optional int64 startTime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 finishTime = 7;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime());
    }

    // optional string lastMessage = 8;
    if (has_lastmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastmessage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string hostNameOfQM = 9;
    if (has_hostnameofqm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostnameofqm());
    }

    // optional int32 queryMasterPort = 10;
    if (has_querymasterport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->querymasterport());
    }

    // optional int32 queryMasterClientPort = 11;
    if (has_querymasterclientport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->querymasterclientport());
    }

    // optional int32 queryMasterInfoPort = 12;
    if (has_querymasterinfoport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->querymasterinfoport());
    }

    // optional .TableDescProto resultDesc = 13;
    if (has_resultdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resultdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryInfoProto::MergeFrom(const QueryInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queryid()) {
      set_queryid(from.queryid());
    }
    if (from.has_sql()) {
      set_sql(from.sql());
    }
    if (from.has_contextvars()) {
      mutable_contextvars()->::KeyValueSetProto::MergeFrom(from.contextvars());
    }
    if (from.has_querystate()) {
      set_querystate(from.querystate());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_lastmessage()) {
      set_lastmessage(from.lastmessage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hostnameofqm()) {
      set_hostnameofqm(from.hostnameofqm());
    }
    if (from.has_querymasterport()) {
      set_querymasterport(from.querymasterport());
    }
    if (from.has_querymasterclientport()) {
      set_querymasterclientport(from.querymasterclientport());
    }
    if (from.has_querymasterinfoport()) {
      set_querymasterinfoport(from.querymasterinfoport());
    }
    if (from.has_resultdesc()) {
      mutable_resultdesc()->::TableDescProto::MergeFrom(from.resultdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryInfoProto::CopyFrom(const QueryInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInfoProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_contextvars()) {
    if (!this->contextvars().IsInitialized()) return false;
  }
  if (has_resultdesc()) {
    if (!this->resultdesc().IsInitialized()) return false;
  }
  return true;
}

void QueryInfoProto::Swap(QueryInfoProto* other) {
  if (other != this) {
    std::swap(queryid_, other->queryid_);
    std::swap(sql_, other->sql_);
    std::swap(contextvars_, other->contextvars_);
    std::swap(querystate_, other->querystate_);
    std::swap(progress_, other->progress_);
    std::swap(starttime_, other->starttime_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(lastmessage_, other->lastmessage_);
    std::swap(hostnameofqm_, other->hostnameofqm_);
    std::swap(querymasterport_, other->querymasterport_);
    std::swap(querymasterclientport_, other->querymasterclientport_);
    std::swap(querymasterinfoport_, other->querymasterinfoport_);
    std::swap(resultdesc_, other->resultdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryInfoProto_descriptor_;
  metadata.reflection = QueryInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageHistoryProto::kExecutionBlockIdFieldNumber;
const int StageHistoryProto::kStateFieldNumber;
const int StageHistoryProto::kStartTimeFieldNumber;
const int StageHistoryProto::kFinishTimeFieldNumber;
const int StageHistoryProto::kSucceededObjectCountFieldNumber;
const int StageHistoryProto::kFailedObjectCountFieldNumber;
const int StageHistoryProto::kKilledObjectCountFieldNumber;
const int StageHistoryProto::kTotalScheduledObjectsCountFieldNumber;
const int StageHistoryProto::kTotalInputBytesFieldNumber;
const int StageHistoryProto::kTotalReadBytesFieldNumber;
const int StageHistoryProto::kTotalReadRowsFieldNumber;
const int StageHistoryProto::kTotalWriteBytesFieldNumber;
const int StageHistoryProto::kTotalWriteRowsFieldNumber;
const int StageHistoryProto::kNumShufflesFieldNumber;
const int StageHistoryProto::kProgressFieldNumber;
const int StageHistoryProto::kPlanFieldNumber;
const int StageHistoryProto::kHostLocalAssignedFieldNumber;
const int StageHistoryProto::kRackLocalAssignedFieldNumber;
#endif  // !_MSC_VER

StageHistoryProto::StageHistoryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageHistoryProto::InitAsDefaultInstance() {
}

StageHistoryProto::StageHistoryProto(const StageHistoryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageHistoryProto::SharedCtor() {
  _cached_size_ = 0;
  executionblockid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_LONGLONG(0);
  finishtime_ = GOOGLE_LONGLONG(0);
  succeededobjectcount_ = 0;
  failedobjectcount_ = 0;
  killedobjectcount_ = 0;
  totalscheduledobjectscount_ = 0;
  totalinputbytes_ = GOOGLE_LONGLONG(0);
  totalreadbytes_ = GOOGLE_LONGLONG(0);
  totalreadrows_ = GOOGLE_LONGLONG(0);
  totalwritebytes_ = GOOGLE_LONGLONG(0);
  totalwriterows_ = GOOGLE_LONGLONG(0);
  numshuffles_ = 0;
  progress_ = 0;
  plan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostlocalassigned_ = 0;
  racklocalassigned_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageHistoryProto::~StageHistoryProto() {
  SharedDtor();
}

void StageHistoryProto::SharedDtor() {
  if (executionblockid_ != &::google::protobuf::internal::kEmptyString) {
    delete executionblockid_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (plan_ != &::google::protobuf::internal::kEmptyString) {
    delete plan_;
  }
  if (this != default_instance_) {
  }
}

void StageHistoryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageHistoryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageHistoryProto_descriptor_;
}

const StageHistoryProto& StageHistoryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

StageHistoryProto* StageHistoryProto::default_instance_ = NULL;

StageHistoryProto* StageHistoryProto::New() const {
  return new StageHistoryProto;
}

void StageHistoryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_executionblockid()) {
      if (executionblockid_ != &::google::protobuf::internal::kEmptyString) {
        executionblockid_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    starttime_ = GOOGLE_LONGLONG(0);
    finishtime_ = GOOGLE_LONGLONG(0);
    succeededobjectcount_ = 0;
    failedobjectcount_ = 0;
    killedobjectcount_ = 0;
    totalscheduledobjectscount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    totalinputbytes_ = GOOGLE_LONGLONG(0);
    totalreadbytes_ = GOOGLE_LONGLONG(0);
    totalreadrows_ = GOOGLE_LONGLONG(0);
    totalwritebytes_ = GOOGLE_LONGLONG(0);
    totalwriterows_ = GOOGLE_LONGLONG(0);
    numshuffles_ = 0;
    progress_ = 0;
    if (has_plan()) {
      if (plan_ != &::google::protobuf::internal::kEmptyString) {
        plan_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hostlocalassigned_ = 0;
    racklocalassigned_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageHistoryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string executionBlockId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executionblockid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executionblockid().data(), this->executionblockid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // required string state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finishTime;
        break;
      }

      // optional int64 finishTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_succeededObjectCount;
        break;
      }

      // optional int32 succeededObjectCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succeededObjectCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succeededobjectcount_)));
          set_has_succeededobjectcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_failedObjectCount;
        break;
      }

      // optional int32 failedObjectCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failedObjectCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failedobjectcount_)));
          set_has_failedobjectcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_killedObjectCount;
        break;
      }

      // optional int32 killedObjectCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killedObjectCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killedobjectcount_)));
          set_has_killedobjectcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_totalScheduledObjectsCount;
        break;
      }

      // optional int32 totalScheduledObjectsCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalScheduledObjectsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscheduledobjectscount_)));
          set_has_totalscheduledobjectscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_totalInputBytes;
        break;
      }

      // optional int64 totalInputBytes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalInputBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalinputbytes_)));
          set_has_totalinputbytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_totalReadBytes;
        break;
      }

      // optional int64 totalReadBytes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalReadBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalreadbytes_)));
          set_has_totalreadbytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_totalReadRows;
        break;
      }

      // optional int64 totalReadRows = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalReadRows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalreadrows_)));
          set_has_totalreadrows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_totalWriteBytes;
        break;
      }

      // optional int64 totalWriteBytes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalWriteBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwritebytes_)));
          set_has_totalwritebytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_totalWriteRows;
        break;
      }

      // optional int64 totalWriteRows = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalWriteRows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwriterows_)));
          set_has_totalwriterows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_numShuffles;
        break;
      }

      // optional int32 numShuffles = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numShuffles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numshuffles_)));
          set_has_numshuffles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_progress;
        break;
      }

      // optional float progress = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_plan;
        break;
      }

      // optional string plan = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plan().data(), this->plan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hostLocalAssigned;
        break;
      }

      // optional int32 hostLocalAssigned = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hostLocalAssigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hostlocalassigned_)));
          set_has_hostlocalassigned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_rackLocalAssigned;
        break;
      }

      // optional int32 rackLocalAssigned = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rackLocalAssigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &racklocalassigned_)));
          set_has_racklocalassigned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageHistoryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string executionBlockId = 1;
  if (has_executionblockid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executionblockid().data(), this->executionblockid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->executionblockid(), output);
  }

  // required string state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->state(), output);
  }

  // optional int64 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->starttime(), output);
  }

  // optional int64 finishTime = 4;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->finishtime(), output);
  }

  // optional int32 succeededObjectCount = 5;
  if (has_succeededobjectcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->succeededobjectcount(), output);
  }

  // optional int32 failedObjectCount = 6;
  if (has_failedobjectcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->failedobjectcount(), output);
  }

  // optional int32 killedObjectCount = 7;
  if (has_killedobjectcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->killedobjectcount(), output);
  }

  // optional int32 totalScheduledObjectsCount = 8;
  if (has_totalscheduledobjectscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalscheduledobjectscount(), output);
  }

  // optional int64 totalInputBytes = 9;
  if (has_totalinputbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->totalinputbytes(), output);
  }

  // optional int64 totalReadBytes = 10;
  if (has_totalreadbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->totalreadbytes(), output);
  }

  // optional int64 totalReadRows = 11;
  if (has_totalreadrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->totalreadrows(), output);
  }

  // optional int64 totalWriteBytes = 12;
  if (has_totalwritebytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->totalwritebytes(), output);
  }

  // optional int64 totalWriteRows = 13;
  if (has_totalwriterows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->totalwriterows(), output);
  }

  // optional int32 numShuffles = 14;
  if (has_numshuffles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->numshuffles(), output);
  }

  // optional float progress = 15;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->progress(), output);
  }

  // optional string plan = 16;
  if (has_plan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plan().data(), this->plan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->plan(), output);
  }

  // optional int32 hostLocalAssigned = 17;
  if (has_hostlocalassigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hostlocalassigned(), output);
  }

  // optional int32 rackLocalAssigned = 18;
  if (has_racklocalassigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->racklocalassigned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageHistoryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string executionBlockId = 1;
  if (has_executionblockid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executionblockid().data(), this->executionblockid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->executionblockid(), target);
  }

  // required string state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state(), target);
  }

  // optional int64 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->starttime(), target);
  }

  // optional int64 finishTime = 4;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->finishtime(), target);
  }

  // optional int32 succeededObjectCount = 5;
  if (has_succeededobjectcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->succeededobjectcount(), target);
  }

  // optional int32 failedObjectCount = 6;
  if (has_failedobjectcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->failedobjectcount(), target);
  }

  // optional int32 killedObjectCount = 7;
  if (has_killedobjectcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->killedobjectcount(), target);
  }

  // optional int32 totalScheduledObjectsCount = 8;
  if (has_totalscheduledobjectscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalscheduledobjectscount(), target);
  }

  // optional int64 totalInputBytes = 9;
  if (has_totalinputbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->totalinputbytes(), target);
  }

  // optional int64 totalReadBytes = 10;
  if (has_totalreadbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->totalreadbytes(), target);
  }

  // optional int64 totalReadRows = 11;
  if (has_totalreadrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->totalreadrows(), target);
  }

  // optional int64 totalWriteBytes = 12;
  if (has_totalwritebytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->totalwritebytes(), target);
  }

  // optional int64 totalWriteRows = 13;
  if (has_totalwriterows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->totalwriterows(), target);
  }

  // optional int32 numShuffles = 14;
  if (has_numshuffles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->numshuffles(), target);
  }

  // optional float progress = 15;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->progress(), target);
  }

  // optional string plan = 16;
  if (has_plan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plan().data(), this->plan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->plan(), target);
  }

  // optional int32 hostLocalAssigned = 17;
  if (has_hostlocalassigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hostlocalassigned(), target);
  }

  // optional int32 rackLocalAssigned = 18;
  if (has_racklocalassigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->racklocalassigned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageHistoryProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string executionBlockId = 1;
    if (has_executionblockid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executionblockid());
    }

    // required string state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional int64 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 finishTime = 4;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime());
    }

    // optional int32 succeededObjectCount = 5;
    if (has_succeededobjectcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->succeededobjectcount());
    }

    // optional int32 failedObjectCount = 6;
    if (has_failedobjectcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failedobjectcount());
    }

    // optional int32 killedObjectCount = 7;
    if (has_killedobjectcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killedobjectcount());
    }

    // optional int32 totalScheduledObjectsCount = 8;
    if (has_totalscheduledobjectscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscheduledobjectscount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 totalInputBytes = 9;
    if (has_totalinputbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalinputbytes());
    }

    // optional int64 totalReadBytes = 10;
    if (has_totalreadbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalreadbytes());
    }

    // optional int64 totalReadRows = 11;
    if (has_totalreadrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalreadrows());
    }

    // optional int64 totalWriteBytes = 12;
    if (has_totalwritebytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalwritebytes());
    }

    // optional int64 totalWriteRows = 13;
    if (has_totalwriterows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalwriterows());
    }

    // optional int32 numShuffles = 14;
    if (has_numshuffles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numshuffles());
    }

    // optional float progress = 15;
    if (has_progress()) {
      total_size += 1 + 4;
    }

    // optional string plan = 16;
    if (has_plan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plan());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 hostLocalAssigned = 17;
    if (has_hostlocalassigned()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hostlocalassigned());
    }

    // optional int32 rackLocalAssigned = 18;
    if (has_racklocalassigned()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->racklocalassigned());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageHistoryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageHistoryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageHistoryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageHistoryProto::MergeFrom(const StageHistoryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executionblockid()) {
      set_executionblockid(from.executionblockid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_succeededobjectcount()) {
      set_succeededobjectcount(from.succeededobjectcount());
    }
    if (from.has_failedobjectcount()) {
      set_failedobjectcount(from.failedobjectcount());
    }
    if (from.has_killedobjectcount()) {
      set_killedobjectcount(from.killedobjectcount());
    }
    if (from.has_totalscheduledobjectscount()) {
      set_totalscheduledobjectscount(from.totalscheduledobjectscount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_totalinputbytes()) {
      set_totalinputbytes(from.totalinputbytes());
    }
    if (from.has_totalreadbytes()) {
      set_totalreadbytes(from.totalreadbytes());
    }
    if (from.has_totalreadrows()) {
      set_totalreadrows(from.totalreadrows());
    }
    if (from.has_totalwritebytes()) {
      set_totalwritebytes(from.totalwritebytes());
    }
    if (from.has_totalwriterows()) {
      set_totalwriterows(from.totalwriterows());
    }
    if (from.has_numshuffles()) {
      set_numshuffles(from.numshuffles());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_plan()) {
      set_plan(from.plan());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hostlocalassigned()) {
      set_hostlocalassigned(from.hostlocalassigned());
    }
    if (from.has_racklocalassigned()) {
      set_racklocalassigned(from.racklocalassigned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageHistoryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageHistoryProto::CopyFrom(const StageHistoryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageHistoryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StageHistoryProto::Swap(StageHistoryProto* other) {
  if (other != this) {
    std::swap(executionblockid_, other->executionblockid_);
    std::swap(state_, other->state_);
    std::swap(starttime_, other->starttime_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(succeededobjectcount_, other->succeededobjectcount_);
    std::swap(failedobjectcount_, other->failedobjectcount_);
    std::swap(killedobjectcount_, other->killedobjectcount_);
    std::swap(totalscheduledobjectscount_, other->totalscheduledobjectscount_);
    std::swap(totalinputbytes_, other->totalinputbytes_);
    std::swap(totalreadbytes_, other->totalreadbytes_);
    std::swap(totalreadrows_, other->totalreadrows_);
    std::swap(totalwritebytes_, other->totalwritebytes_);
    std::swap(totalwriterows_, other->totalwriterows_);
    std::swap(numshuffles_, other->numshuffles_);
    std::swap(progress_, other->progress_);
    std::swap(plan_, other->plan_);
    std::swap(hostlocalassigned_, other->hostlocalassigned_);
    std::swap(racklocalassigned_, other->racklocalassigned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageHistoryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageHistoryProto_descriptor_;
  metadata.reflection = StageHistoryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryHistoryProto::kQueryIdFieldNumber;
const int QueryHistoryProto::kQueryMasterFieldNumber;
const int QueryHistoryProto::kHttpPortFieldNumber;
const int QueryHistoryProto::kLogicalPlanFieldNumber;
const int QueryHistoryProto::kDistributedPlanFieldNumber;
const int QueryHistoryProto::kSessionVariablesFieldNumber;
const int QueryHistoryProto::kStageHistoriesFieldNumber;
#endif  // !_MSC_VER

QueryHistoryProto::QueryHistoryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryHistoryProto::InitAsDefaultInstance() {
}

QueryHistoryProto::QueryHistoryProto(const QueryHistoryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryHistoryProto::SharedCtor() {
  _cached_size_ = 0;
  queryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querymaster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  httpport_ = 0;
  logicalplan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  distributedplan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryHistoryProto::~QueryHistoryProto() {
  SharedDtor();
}

void QueryHistoryProto::SharedDtor() {
  if (queryid_ != &::google::protobuf::internal::kEmptyString) {
    delete queryid_;
  }
  if (querymaster_ != &::google::protobuf::internal::kEmptyString) {
    delete querymaster_;
  }
  if (logicalplan_ != &::google::protobuf::internal::kEmptyString) {
    delete logicalplan_;
  }
  if (distributedplan_ != &::google::protobuf::internal::kEmptyString) {
    delete distributedplan_;
  }
  if (this != default_instance_) {
  }
}

void QueryHistoryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryHistoryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryHistoryProto_descriptor_;
}

const QueryHistoryProto& QueryHistoryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

QueryHistoryProto* QueryHistoryProto::default_instance_ = NULL;

QueryHistoryProto* QueryHistoryProto::New() const {
  return new QueryHistoryProto;
}

void QueryHistoryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queryid()) {
      if (queryid_ != &::google::protobuf::internal::kEmptyString) {
        queryid_->clear();
      }
    }
    if (has_querymaster()) {
      if (querymaster_ != &::google::protobuf::internal::kEmptyString) {
        querymaster_->clear();
      }
    }
    httpport_ = 0;
    if (has_logicalplan()) {
      if (logicalplan_ != &::google::protobuf::internal::kEmptyString) {
        logicalplan_->clear();
      }
    }
    if (has_distributedplan()) {
      if (distributedplan_ != &::google::protobuf::internal::kEmptyString) {
        distributedplan_->clear();
      }
    }
  }
  sessionvariables_.Clear();
  stagehistories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryHistoryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queryId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queryid().data(), this->queryid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryMaster;
        break;
      }

      // optional string queryMaster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryMaster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_querymaster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->querymaster().data(), this->querymaster().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_httpPort;
        break;
      }

      // optional int32 httpPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &httpport_)));
          set_has_httpport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logicalPlan;
        break;
      }

      // optional string logicalPlan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logicalPlan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logicalplan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logicalplan().data(), this->logicalplan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_distributedPlan;
        break;
      }

      // optional string distributedPlan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distributedPlan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_distributedplan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->distributedplan().data(), this->distributedplan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sessionVariables;
        break;
      }

      // repeated .KeyValueProto sessionVariables = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionVariables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessionvariables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sessionVariables;
        if (input->ExpectTag(58)) goto parse_stageHistories;
        break;
      }

      // repeated .tajo.client.StageHistoryProto stageHistories = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stageHistories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stagehistories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stageHistories;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryHistoryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string queryId = 1;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queryid().data(), this->queryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queryid(), output);
  }

  // optional string queryMaster = 2;
  if (has_querymaster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->querymaster().data(), this->querymaster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->querymaster(), output);
  }

  // optional int32 httpPort = 3;
  if (has_httpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->httpport(), output);
  }

  // optional string logicalPlan = 4;
  if (has_logicalplan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logicalplan().data(), this->logicalplan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->logicalplan(), output);
  }

  // optional string distributedPlan = 5;
  if (has_distributedplan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->distributedplan().data(), this->distributedplan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->distributedplan(), output);
  }

  // repeated .KeyValueProto sessionVariables = 6;
  for (int i = 0; i < this->sessionvariables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sessionvariables(i), output);
  }

  // repeated .tajo.client.StageHistoryProto stageHistories = 7;
  for (int i = 0; i < this->stagehistories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stagehistories(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryHistoryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string queryId = 1;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queryid().data(), this->queryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queryid(), target);
  }

  // optional string queryMaster = 2;
  if (has_querymaster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->querymaster().data(), this->querymaster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->querymaster(), target);
  }

  // optional int32 httpPort = 3;
  if (has_httpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->httpport(), target);
  }

  // optional string logicalPlan = 4;
  if (has_logicalplan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logicalplan().data(), this->logicalplan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logicalplan(), target);
  }

  // optional string distributedPlan = 5;
  if (has_distributedplan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->distributedplan().data(), this->distributedplan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->distributedplan(), target);
  }

  // repeated .KeyValueProto sessionVariables = 6;
  for (int i = 0; i < this->sessionvariables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sessionvariables(i), target);
  }

  // repeated .tajo.client.StageHistoryProto stageHistories = 7;
  for (int i = 0; i < this->stagehistories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stagehistories(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryHistoryProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queryId = 1;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queryid());
    }

    // optional string queryMaster = 2;
    if (has_querymaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->querymaster());
    }

    // optional int32 httpPort = 3;
    if (has_httpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->httpport());
    }

    // optional string logicalPlan = 4;
    if (has_logicalplan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logicalplan());
    }

    // optional string distributedPlan = 5;
    if (has_distributedplan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->distributedplan());
    }

  }
  // repeated .KeyValueProto sessionVariables = 6;
  total_size += 1 * this->sessionvariables_size();
  for (int i = 0; i < this->sessionvariables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sessionvariables(i));
  }

  // repeated .tajo.client.StageHistoryProto stageHistories = 7;
  total_size += 1 * this->stagehistories_size();
  for (int i = 0; i < this->stagehistories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stagehistories(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryHistoryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryHistoryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryHistoryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryHistoryProto::MergeFrom(const QueryHistoryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  sessionvariables_.MergeFrom(from.sessionvariables_);
  stagehistories_.MergeFrom(from.stagehistories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queryid()) {
      set_queryid(from.queryid());
    }
    if (from.has_querymaster()) {
      set_querymaster(from.querymaster());
    }
    if (from.has_httpport()) {
      set_httpport(from.httpport());
    }
    if (from.has_logicalplan()) {
      set_logicalplan(from.logicalplan());
    }
    if (from.has_distributedplan()) {
      set_distributedplan(from.distributedplan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryHistoryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryHistoryProto::CopyFrom(const QueryHistoryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHistoryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < sessionvariables_size(); i++) {
    if (!this->sessionvariables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < stagehistories_size(); i++) {
    if (!this->stagehistories(i).IsInitialized()) return false;
  }
  return true;
}

void QueryHistoryProto::Swap(QueryHistoryProto* other) {
  if (other != this) {
    std::swap(queryid_, other->queryid_);
    std::swap(querymaster_, other->querymaster_);
    std::swap(httpport_, other->httpport_);
    std::swap(logicalplan_, other->logicalplan_);
    std::swap(distributedplan_, other->distributedplan_);
    sessionvariables_.Swap(&other->sessionvariables_);
    stagehistories_.Swap(&other->stagehistories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryHistoryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryHistoryProto_descriptor_;
  metadata.reflection = QueryHistoryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryHistoryResponse::kStateFieldNumber;
const int GetQueryHistoryResponse::kQueryHistoryFieldNumber;
#endif  // !_MSC_VER

GetQueryHistoryResponse::GetQueryHistoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryHistoryResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  queryhistory_ = const_cast< ::tajo::client::QueryHistoryProto*>(&::tajo::client::QueryHistoryProto::default_instance());
}

GetQueryHistoryResponse::GetQueryHistoryResponse(const GetQueryHistoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  queryhistory_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryHistoryResponse::~GetQueryHistoryResponse() {
  SharedDtor();
}

void GetQueryHistoryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete queryhistory_;
  }
}

void GetQueryHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryHistoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryHistoryResponse_descriptor_;
}

const GetQueryHistoryResponse& GetQueryHistoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryHistoryResponse* GetQueryHistoryResponse::default_instance_ = NULL;

GetQueryHistoryResponse* GetQueryHistoryResponse::New() const {
  return new GetQueryHistoryResponse;
}

void GetQueryHistoryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_queryhistory()) {
      if (queryhistory_ != NULL) queryhistory_->::tajo::client::QueryHistoryProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryHistory;
        break;
      }

      // optional .tajo.client.QueryHistoryProto queryHistory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryHistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryhistory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .tajo.client.QueryHistoryProto queryHistory = 2;
  if (has_queryhistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queryhistory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryHistoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .tajo.client.QueryHistoryProto queryHistory = 2;
  if (has_queryhistory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queryhistory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryHistoryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .tajo.client.QueryHistoryProto queryHistory = 2;
    if (has_queryhistory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryhistory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryHistoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryHistoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryHistoryResponse::MergeFrom(const GetQueryHistoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_queryhistory()) {
      mutable_queryhistory()->::tajo::client::QueryHistoryProto::MergeFrom(from.queryhistory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryHistoryResponse::CopyFrom(const GetQueryHistoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryHistoryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_queryhistory()) {
    if (!this->queryhistory().IsInitialized()) return false;
  }
  return true;
}

void GetQueryHistoryResponse::Swap(GetQueryHistoryResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(queryhistory_, other->queryhistory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryHistoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryHistoryResponse_descriptor_;
  metadata.reflection = GetQueryHistoryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueryInfoResponse::kStateFieldNumber;
const int GetQueryInfoResponse::kQueryInfoFieldNumber;
#endif  // !_MSC_VER

GetQueryInfoResponse::GetQueryInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQueryInfoResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  queryinfo_ = const_cast< ::tajo::client::QueryInfoProto*>(&::tajo::client::QueryInfoProto::default_instance());
}

GetQueryInfoResponse::GetQueryInfoResponse(const GetQueryInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQueryInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  queryinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueryInfoResponse::~GetQueryInfoResponse() {
  SharedDtor();
}

void GetQueryInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete queryinfo_;
  }
}

void GetQueryInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueryInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueryInfoResponse_descriptor_;
}

const GetQueryInfoResponse& GetQueryInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetQueryInfoResponse* GetQueryInfoResponse::default_instance_ = NULL;

GetQueryInfoResponse* GetQueryInfoResponse::New() const {
  return new GetQueryInfoResponse;
}

void GetQueryInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::ReturnState::Clear();
    }
    if (has_queryinfo()) {
      if (queryinfo_ != NULL) queryinfo_->::tajo::client::QueryInfoProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueryInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryInfo;
        break;
      }

      // optional .tajo.client.QueryInfoProto queryInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQueryInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .tajo.client.QueryInfoProto queryInfo = 2;
  if (has_queryinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queryinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQueryInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .tajo.client.QueryInfoProto queryInfo = 2;
  if (has_queryinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queryinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQueryInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .tajo.client.QueryInfoProto queryInfo = 2;
    if (has_queryinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueryInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueryInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueryInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueryInfoResponse::MergeFrom(const GetQueryInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::ReturnState::MergeFrom(from.state());
    }
    if (from.has_queryinfo()) {
      mutable_queryinfo()->::tajo::client::QueryInfoProto::MergeFrom(from.queryinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueryInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueryInfoResponse::CopyFrom(const GetQueryInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueryInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_queryinfo()) {
    if (!this->queryinfo().IsInitialized()) return false;
  }
  return true;
}

void GetQueryInfoResponse::Swap(GetQueryInfoResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(queryinfo_, other->queryinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueryInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueryInfoResponse_descriptor_;
  metadata.reflection = GetQueryInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateIndexResponse::kResultFieldNumber;
const int CreateIndexResponse::kIndexDescFieldNumber;
#endif  // !_MSC_VER

CreateIndexResponse::CreateIndexResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateIndexResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::ReturnState*>(&::ReturnState::default_instance());
  indexdesc_ = const_cast< ::IndexDescProto*>(&::IndexDescProto::default_instance());
}

CreateIndexResponse::CreateIndexResponse(const CreateIndexResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateIndexResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  indexdesc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateIndexResponse::~CreateIndexResponse() {
  SharedDtor();
}

void CreateIndexResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete indexdesc_;
  }
}

void CreateIndexResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateIndexResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateIndexResponse_descriptor_;
}

const CreateIndexResponse& CreateIndexResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

CreateIndexResponse* CreateIndexResponse::default_instance_ = NULL;

CreateIndexResponse* CreateIndexResponse::New() const {
  return new CreateIndexResponse;
}

void CreateIndexResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ReturnState::Clear();
    }
    if (has_indexdesc()) {
      if (indexdesc_ != NULL) indexdesc_->::IndexDescProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateIndexResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReturnState result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_indexDesc;
        break;
      }

      // optional .IndexDescProto indexDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateIndexResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ReturnState result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .IndexDescProto indexDesc = 2;
  if (has_indexdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->indexdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateIndexResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ReturnState result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .IndexDescProto indexDesc = 2;
  if (has_indexdesc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->indexdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateIndexResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReturnState result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .IndexDescProto indexDesc = 2;
    if (has_indexdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateIndexResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateIndexResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateIndexResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateIndexResponse::MergeFrom(const CreateIndexResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ReturnState::MergeFrom(from.result());
    }
    if (from.has_indexdesc()) {
      mutable_indexdesc()->::IndexDescProto::MergeFrom(from.indexdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateIndexResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateIndexResponse::CopyFrom(const CreateIndexResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_indexdesc()) {
    if (!this->indexdesc().IsInitialized()) return false;
  }
  return true;
}

void CreateIndexResponse::Swap(CreateIndexResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(indexdesc_, other->indexdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateIndexResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateIndexResponse_descriptor_;
  metadata.reflection = CreateIndexResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIndexWithColumnsRequest::kSessionIdFieldNumber;
const int GetIndexWithColumnsRequest::kTableNameFieldNumber;
const int GetIndexWithColumnsRequest::kColumnNamesFieldNumber;
#endif  // !_MSC_VER

GetIndexWithColumnsRequest::GetIndexWithColumnsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetIndexWithColumnsRequest::InitAsDefaultInstance() {
  sessionid_ = const_cast< ::SessionIdProto*>(&::SessionIdProto::default_instance());
}

GetIndexWithColumnsRequest::GetIndexWithColumnsRequest(const GetIndexWithColumnsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetIndexWithColumnsRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = NULL;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIndexWithColumnsRequest::~GetIndexWithColumnsRequest() {
  SharedDtor();
}

void GetIndexWithColumnsRequest::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
    delete sessionid_;
  }
}

void GetIndexWithColumnsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIndexWithColumnsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIndexWithColumnsRequest_descriptor_;
}

const GetIndexWithColumnsRequest& GetIndexWithColumnsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientProtos_2eproto();
  return *default_instance_;
}

GetIndexWithColumnsRequest* GetIndexWithColumnsRequest::default_instance_ = NULL;

GetIndexWithColumnsRequest* GetIndexWithColumnsRequest::New() const {
  return new GetIndexWithColumnsRequest;
}

void GetIndexWithColumnsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != NULL) sessionid_->::SessionIdProto::Clear();
    }
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
  }
  columnnames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIndexWithColumnsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SessionIdProto sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tableName;
        break;
      }

      // required string tableName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columnNames;
        break;
      }

      // repeated string columnNames = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_columnnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->columnnames(this->columnnames_size() - 1).data(),
            this->columnnames(this->columnnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columnNames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetIndexWithColumnsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessionid(), output);
  }

  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }

  // repeated string columnNames = 3;
  for (int i = 0; i < this->columnnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->columnnames(i).data(), this->columnnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->columnnames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetIndexWithColumnsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SessionIdProto sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sessionid(), target);
  }

  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }

  // repeated string columnNames = 3;
  for (int i = 0; i < this->columnnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnnames(i).data(), this->columnnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->columnnames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetIndexWithColumnsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SessionIdProto sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessionid());
    }

    // required string tableName = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

  }
  // repeated string columnNames = 3;
  total_size += 1 * this->columnnames_size();
  for (int i = 0; i < this->columnnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->columnnames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIndexWithColumnsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIndexWithColumnsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIndexWithColumnsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIndexWithColumnsRequest::MergeFrom(const GetIndexWithColumnsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  columnnames_.MergeFrom(from.columnnames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      mutable_sessionid()->::SessionIdProto::MergeFrom(from.sessionid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIndexWithColumnsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexWithColumnsRequest::CopyFrom(const GetIndexWithColumnsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexWithColumnsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sessionid()) {
    if (!this->sessionid().IsInitialized()) return false;
  }
  return true;
}

void GetIndexWithColumnsRequest::Swap(GetIndexWithColumnsRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(tablename_, other->tablename_);
    columnnames_.Swap(&other->columnnames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIndexWithColumnsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIndexWithColumnsRequest_descriptor_;
  metadata.reflection = GetIndexWithColumnsRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace tajo

// @@protoc_insertion_point(global_scope)
